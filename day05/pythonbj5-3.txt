

===========================

traceback消息---异常信息

异常                描述
NameError       未声明/初始化对象
IndexError      序列中没有此索引
SyntaxError     语法错误
KeyboardInterrupt   用户中断执行 ##敲快捷键ctrl+ c 中断^CTraceback
EOFError         没有内建输入,到达EOF标记 #敲快捷键ctrl+d 中断输入,会报异常
IOError          输入/输出操作失败
ZeroDivisionError:  #零分割误差:除数不能是零
ValueError:     #输入的数据类型错误
TypeError:     #变量类型错误
FileExistsError:
AssertionError: 


os模块简介
•  对文件系统的访问大多通过python的os模块实现
•  该模块是python访问操作系统功能的主要接口
•  有些方法,如copy等,并没有提供,
可以使用shutil模块作为补充

os模块方法
函数                 作用
os.symlink(src, dst)       创建符号链接,即软链接

os.link(src, dst)	创建硬链接，名为参数 dst，指向参数 src

os.remove(path)  删除路径为path的文件。
        如果path 是一个文件夹，将抛出OSError; 

listdir()        列出指定目录的文件
getcwd()         返回当前工作目录
mkdir()          创建目录
os.mkdir(path[, mode])	以数字mode的mode创建一个名为path的文件夹.
       默认的 mode 是 0777 (八进制)。

makedirs(path)  #递归创建新的目录,如果存在的话，抛异常
os.makedirs('E:\\ONE\\TWO')
os.makedirs('E:\\ONE\\THREE')
#这样我们就在E盘中得到一个ONE目录，
其中含有两个目录，TWO，THREE

os.removedirs(path)	# 递归删除没有文件的空目录

os.rmdir(path)  删除path指定的空目录，
        如果目录非空，则抛出一个OSError异常。

chmod()          改变权限模式
getatime()       返回最近访问时间
chdir()          改变工作目录


=============== 可以跨平台的一些操作：

os.curdir:表示当前目录，和 '.'  表示同一个意思
os.pardir:表示上一级目录，和 ‘..’表示同一个意思

>>> os.curdir   #表示当前目录
'.'
>>> print(os.curdir)
.
>>> os.pardir  #表示上一级目录
'..'
>>> os.se
os.sendfile(         os.setgid(           os.setresgid(
os.sep               os.setgroups(        os.setresuid(
os.set_blocking(     os.setpgid(          os.setreuid(
os.set_inheritable(  os.setpgrp(          os.setsid(
os.setegid(          os.setpriority(      os.setuid(
os.seteuid(          os.setregid(         os.setxattr(

>>> os.sep  #表示当前系统下的路径分割符,Linux的路径分割符 表示 '/'
'/'
>>> os.linesep  #Linux中表示  ‘\n’
'\n'
>>> os.name
os.name
>>> os.name  #Linux中显示  'posix',代表当前使用的操作系统
'posix'
>>> 
os.sep:表示当前系统下的路径分割符，
在不同的操作平台上，他所代表的东西也不同，
win表示  ‘\\’,
Linux表示 '/'

os.linesep:当前平台使用的行终止符
（Win 中表示  ‘\r\n’,Linux中表示  ‘\n’）

os.name:代表自己当前使用的操作系统，
（Win中会显示  ‘nt’,Linux中显示  'posix'


[root@V0 pyscripts]# python3
Python 3.6.7 (default, Apr  2 2019, 11:30:00) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux
Type "help", "copyright", "credits" or "license" for more information.

>>> import  os,  shutil  #导入多个模板

>>> os.mkdir('/osdir')
>>> os.listdir('/osdir')
[]
>>> os.symlink('/etc/hosts', '/osdir')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileExistsError: [Errno 17] File exists: '/etc/hosts' -> '/osdir'

>>> os.symlink('/etc/hosts', '/osdir/copyhosts')  #注意是添加 软链接

>>> os.listdir('/osdir')
['copyhosts']
>>> os.chdir('/osdir')
>>> os.getcwd
os.getcwd(   os.getcwdb(  
>>> os.getcwd()
'/osdir'
>>> 
>>> os.listdir('.') #查看当前路径下的所有文件或文件夹
['copyhosts']

>>> shutil.copy('/etc/passwd', '.')  #注意是复制文件,不是加软链接
'./passwd'
>>> os.listdir('.')
['copyhosts', 'passwd']
>>> 

>>> print(os.listdir('/osdir'))
['copyhosts']
>>> print(os.getcwd())
/osdir
>>> 
>>> os.removedirs('/osdir')  
            # 工作路径在将要删除的目录下,操作删除此目录逻辑不对
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib/python3.6/os.py", line 238, in removedirs
    rmdir(name)
OSError: [Errno 39] Directory not empty: '/osdir'
>>> 
>>> os.remove('copyhosts') #删除当前目录下的文件copyhosts
>>> os.listdir()  #查看文件已经删除
[]
>>> os.chdir('/root')  #切换到root 目录下
>>> print(os.getcwd())  #查看当前的工作路径
/root
>>> os.removedirs('/osdir') # 递归删除没有文件的空目录
>>> 
>>> os.path.exists('ip.sh') #查看当前工作目录下的相对路径下是否有文件存在
True
>>> os.path.exists('ipxx.sh') ##查看当前工作目录下的相对路径下是否有文件存在
False
>>> os.path.exists('/root/pyscripts/') #查看在 绝对路径下是否有文件夹存在
True
>>> os.path.exists('/root/pyscriptsxxx/')
False
>>> 




[root@V0 pyscripts]# ls  /osdir/
copyhosts
[root@V0 pyscripts]# ll  /osdir/copyhosts 
lrwxrwxrwx 1 root root 10 4月   4 14:59 /osdir/copyhosts -> /etc/hosts

[root@V0 pyscripts]# tail  -1   /osdir/copyhosts
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
[root@V0 pyscripts]# 

文件都有文件名与数据，
这在 Linux 上被分成两个部分：
用户数据 (user data) 
与 元数据 (metadata)。

用户数据，
即文件数据块 (data block)，
数据块是记录文件真实内容的地方； 

元数据则是文件的附加属性，
如文件名、文件大小、创建时间、所有者、文件所在的inode等信息。 
在 Linux 中，
元数据中的 inode 号（inode 号即索引节点号）
才是文件的唯一标识而非文件名

简单说，硬链接就是一个 inode 号对应多个文件。
硬链接等于cp -p加同步更新


创建硬链接：ln命令为现有文件创建新的硬链接。 
# ln  现有文件硬链接(文件名)  一个或多个新硬链接

硬链接存在以下几点特性：

文件有相同的 inode 及 data block；
只能对已存在的文件进行创建；
不能交叉文件系统进行硬链接的创建；
  inode 是随着文件的存在而存在，
因此只有当文件存在时才可创建硬链接

不能对目录进行创建，只可对文件创建；
删除一个硬链接文件并不影响其他有相同 inode 号的文件。


symbolic     英 [sɪmˈbɒlɪk]   美 [sɪmˈbɑ:lɪk]  
            adj.象征的，象征性的
软链接：（
   又称符号链接，即 soft link 或 symbolic link） 
软链接有着自己的 inode 号以及用户数据块。
软连接可以指向目录，
而且软连接所指向的目录
可以 位于
不同的文件系统中。 
创建软连接： ln -s 命令创建软链接
# ln  -s  现有文件文件名(或文件夹)   新文件名
# ln  -s  /现有文件夹/       /新文件夹

软链接：ln -s 源文件 目标文件 
硬链接：ln 源文件 目标文件 

软链接特性：

软链接有自己的文件属性及权限等；
可对不存在的文件或目录创建软链接；
软链接可交叉文件系统；
软链接可对文件或目录创建；
创建软链接时，链接计数 i_nlink 不会增加；
删除软链接并不影响被指向的文件，
但若被指向的原文件被删除，
则相关软连接被称为死链接或悬挂的软链接
（即 dangling link，
若被指向路径文件被重新创建，
死链接可恢复为正常的软链接）。

软链接： 保存了其代表的文件的绝对路径，是另外一种文件，
在硬盘上有独立的区块，
访问时替换自身路径。

[root@V0 pyscripts]# stat  /etc/hosts
  文件："/etc/hosts"
  大小：158       	块：8          IO 块：4096   普通文件
设备：fd00h/64768d	Inode：16778291    硬链接：1
权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)
最近访问：2019-04-04 12:18:31.295361503 +0800
最近更改：2013-06-07 22:31:32.000000000 +0800
最近改动：2018-01-30 11:57:25.763000000 +0800
创建时间：-
[root@V0 pyscripts]# stat  /osdir/copyhosts 
  文件："/osdir/copyhosts" -> "/etc/hosts"
  大小：10        	块：0          IO 块：4096   符号链接
设备：fd00h/64768d	Inode：43712       硬链接：1
权限：(0777/lrwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)
最近访问：2019-04-04 15:10:59.302361503 +0800
最近更改：2019-04-04 14:59:06.095361503 +0800
最近改动：2019-04-04 14:59:06.095361503 +0800
创建时间：-
[root@V0 pyscripts]# 
[root@V0 pyscripts]# ll  /osdir/copyhosts   /etc/hosts
-rw-r--r--. 1 root root 158 6月   7 2013 /etc/hosts
lrwxrwxrwx  1 root root  10 4月   4 14:59 /osdir/copyhosts -> /etc/hosts
[root@V0 pyscripts]#
[root@V0 pyscripts]# ll  mima
-rw-r--r-- 1 root root 1681 4月   2 20:42 mima
[root@V0 pyscripts]# 


[root@V0 pyscripts]# vim  ospickle.py
[root@V0 pyscripts]# python3  ospickle.py
__name__ is __main__
sys.argv is ['ospickle.py']
[]
['copyhosts']
/osdir
[root@V0 pyscripts]# ll  /osdir/
总用量 0
lrwxrwxrwx 1 root root 10 4月   4 16:27 copyhosts -> /etc/hosts

[root@V0 pyscripts]# python3  ospickle.py
__name__ is __main__
sys.argv is ['ospickle.py']
[]
['copyhosts']
/osdir
[root@V0 pyscripts]# ll  /osdir/
总用量 0
lrwxrwxrwx 1 root root 10 4月   4 16:28 copyhosts -> /etc/hosts

[root@V0 pyscripts]# cat   ospickle.py
#!/usr/bin/env  python3
import  sys, os, pickle
print('\033[31;47;1m__name__ is %s\033[0m' % __name__)

def  ostest():

  if  os.path.exists('/osdir'):
    if os.path.exists('/osdir/copyhosts'):
      os.remove('/osdir/copyhosts') #删除绝对路径下的文件copyhosts
    os.removedirs('/osdir')   ## 递归删除没有文件的空目录
  os.mkdir('/osdir')  #创建目录

  print(os.listdir('/osdir')) #查看目录,列出指定目录的文件

  os.symlink('/etc/hosts', '/osdir/copyhosts') 
#创建符号链接(即软链接),并且改写文件链接名

  print(os.listdir('/osdir')) #查看目录,列出指定目录的文件

  os.chdir('/osdir')   #切换改变工作目录,等同shell中的 cd 命令

  print(os.getcwd())  #查看当前工作目录的路径



if __name__ == '__main__':
  print('\033[30;43;1msys.argv is %s\033[0m' % sys.argv)
  ostest()


[root@V0 pyscripts]# 

>>> import  os,  shutil
>>> os.getcwd()
'/root'
>>> os.chdir('/osdir') #切换工作路径到指定的目录'/osdir'
>>> os.getcwd()
'/osdir'
>>> os.listdir()
['copyhosts']

>>> os.listdir('.') #查看当前路径下的所有文件或文件夹
['copyhosts']

>>> shutil.copy('/etc/passwd', '.')  #注意是复制文件,不是加软链接
'./passwd'
>>> os.listdir('.')
['copyhosts', 'passwd']
>>> 
>>> os.mkdir('dir2')   #创建目录
>>> os.listdir('.')
['copyhosts', 'passwd', 'dir2']
>>> 
>>> os.curdir
'.'
>>> print(os.curdir)
.
>>> 
>>> print(os.curdir)
.
>>> os.pardir
'..'
>>> 
>>> os.sep
'/'
>>> os.linesep
'\n'
>>> os.name
os.name
>>> os.name
'posix'
>>> os.listdir('.')
['copyhosts', 'passwd', 'dir2']

>>> os.stat('passwd') #将文件的相关属性读出来，然后用stat模块来处理

os.stat_result(st_mode=33188, 
 st_ino=51679021, 
 st_dev=64768, st_nlink=1, 
 st_uid=0, st_gid=0, st_size=2059, 
 st_atime=1554366918, st_mtime=1554366918, st_ctime=1554366918)
>>> 
[root@V0 pyscripts]# ll   passwd 
-rw-r--r-- 1 root root 1728 4月   2 20:43 passwd
[root@V0 pyscripts]#

返回值
stat 结构:
    st_mode: inode 保护模式
            (可以对st_mode做相关的判断，
            如是否是目录，
              是否是文件，
              是否是管道等)
    st_ino: inode 节点号。
    st_dev: inode 驻留的设备。
    st_nlink: inode 的链接数。
    st_uid: 所有者的用户ID。
    st_gid: 所有者的组ID。
    st_size: 普通文件以字节为单位的大小；包含等待某些特殊文件的数据。
    st_atime: 上次访问的时间。
    st_mtime: 最后一次修改的时间。
    st_ctime: 由操作系统报告的"ctime"。
在某些系统上（如Unix）是最新的元数据更改的时间，
在其它系统上（如Windows）
是创建时间（详细信息参见平台的文档）。

>>> os.stat('passwd').st_size  #查看文件大小
2059
>>> 
>>> oct(8)
'0o10'
>>> 
>>> oct(7)
'0o7'
>>> 
>>> int('0o10',8)
8
>>> int(0o10)
8
>>> int(0o11)
9
>>> oct(9)
'0o11'
>>> 
>>> os.stat('passwd').st_mode
33188
>>> type(os.stat('passwd').st_mode)
<class 'int'>

------------------------ /osdir/工作目录下的文件 #注意权限变化

[root@V0 pyscripts]# ll  /osdir/passwd 
-rwx------ 1 root root 2059 4月   4 16:35 /osdir/passwd

>>> oct(os.stat('passwd').st_mode)  #注意权限变化
'0o100644'
>>> type(oct(os.stat('passwd').st_mode))
<class 'str'>
>>> oct(os.stat('passwd').st_mode)[-4:] #注意权限变化
'0644'
>>> os.stat('passwd').st_mode  #注意权限变化
33188
>>> os.chmod('passwd', 0o4700)  #改变权限的操作

>>> os.chmod('passwd', 0o700)    #改变权限的操作
>>> os.stat('passwd').st_mode
33216
>>> oct(os.stat('passwd').st_mode)[-4:]
'0700'

[root@V0 pyscripts]# ll  /osdir/passwd 
-rwx------ 1 root root 2059 4月   4 16:35 /osdir/passwd

-----------------   #改变权限的操作  -------------------

>>> os.chmod('passwd', 0o4720)  #改变权限的操作

>>> oct(os.stat('passwd').st_mode)[-4:]
'4720'
>>> os.stat('passwd').st_mode
35280
>>> oct(os.stat('passwd').st_mode)
'0o104720'
>>> 
[root@V0 pyscripts]# ll  /osdir/passwd  
                       #注意添加了附加root继承权限s(不含x权限会是大写的S )
-rws-w---- 1 root root 2059 4月   4 16:35 /osdir/passwd


判断文件是否可做读写操作
使用os.access()方法判断文件是否可进行读写操作。
语法：
os.access(path, mode)
path为文件路径，mode为操作模式，有这么几种:

os.F_OK: 检查文件是否存在;

os.R_OK: 检查文件是否可读;

os.W_OK: 检查文件是否可以写入;

os.X_OK: 检查文件是否可以执行

>>> os.access('passwd',os.F_OK)
True
>>> os.access('passwd',os.R_OK)
True
>>>
>>> os.access('passwd',os.W_OK)
True
>>> 
>>> os.access('passwd',os.X_OK)
True
>>> 
[root@V0 pyscripts]# ll  /osdir/
总用量 4
lrwxrwxrwx 1 root root   10 4月   4 16:30 copyhosts -> /etc/hosts
drwxr-xr-x 2 root root    6 4月   4 16:39 dir2
-rws-w---- 1 root root 2059 4月   4 16:35 passwd
[root@V0 pyscripts]# 

>>> import  os,  shutil
>>> os.getcwd()
'/root'
>>> os.chdir('/osdir')   #切换工作路径到指定的目录'/osdir'
>>> os.getcwd()
'/osdir'
>>> os.listdir('.')
['copyhosts', 'passwd', 'dir2']
>>> 
>>> os.getcwd()
'/osdir'
>>> os.stat('passwd')
os.stat_result(st_mode=35280, st_ino=51679021, st_dev=64768, st_nlink=1, st_uid=0, st_gid=0, st_size=2059, st_atime=1554366918, st_mtime=1554366918, st_ctime=1554370968)
>>> os.stat('passwd').st_mode
35280
>>> 
>>> import  stat   #注意导入模版
>>> stat.S
stat.SF_APPEND     stat.ST_UID        stat.S_IMODE(      stat.S_ISLNK(
stat.SF_ARCHIVED   stat.S_ENFMT       stat.S_IREAD       stat.S_ISPORT(
stat.SF_IMMUTABLE  stat.S_IEXEC       stat.S_IRGRP       stat.S_ISREG(
stat.SF_NOUNLINK   stat.S_IFBLK       stat.S_IROTH       stat.S_ISSOCK(
stat.SF_SNAPSHOT   stat.S_IFCHR       stat.S_IRUSR       stat.S_ISUID
stat.ST_ATIME      stat.S_IFDIR       stat.S_IRWXG       stat.S_ISVTX
stat.ST_CTIME      stat.S_IFDOOR      stat.S_IRWXO       stat.S_ISWHT(
stat.ST_DEV        stat.S_IFIFO       stat.S_IRWXU       stat.S_IWGRP
stat.ST_GID        stat.S_IFLNK       stat.S_ISBLK(      stat.S_IWOTH
stat.ST_INO        stat.S_IFMT(       stat.S_ISCHR(      stat.S_IWRITE
stat.ST_MODE       stat.S_IFPORT      stat.S_ISDIR(      stat.S_IWUSR
stat.ST_MTIME      stat.S_IFREG       stat.S_ISDOOR(     stat.S_IXGRP
stat.ST_NLINK      stat.S_IFSOCK      stat.S_ISFIFO(     stat.S_IXOTH
stat.ST_SIZE       stat.S_IFWHT       stat.S_ISGID       stat.S_IXUSR

>>> stat.S_ISREG(35280)
True
>>> stat.S_ISREG(os.stat('passwd').st_mode)  #判断是否一般文件
True
>>> os.stat('passwd').st_mode
35280
>>> 
>>> stat.S_ISLNK(os.stat('passwd').st_mode) #
False
>>> stat.S_ISLNK(os.stat('copyhosts').st_mode) ##判断是否链接文件
False
>>> 
>>> stat.S_ISDIR(os.stat('dir2').st_mode) #  #判断是否目录
True
>>> os.listdir('.')
['copyhosts', 'passwd', 'dir2']
>>> 
>>> os.listdir('.')
['copyhosts', 'passwd', 'dir2']
>>> oct(os.stat('passwd').st_mode)
'0o104720'

[root@V0 pyscripts]# ll  /osdir/  #注意权限变化 passwd
总用量 4
lrwxrwxrwx 1 root root   10 4月   4 16:30 copyhosts -> /etc/hosts
drwxr-xr-x 2 root root    6 4月   4 16:39 dir2
-rws-w---- 1 root root 2059 4月   4 16:35 passwd

-----------------   #改变权限的操作  -------------------

>>> os.chmod('/osdir/passwd', stat.S_IRWXU + stat.S_IRGRP + stat.S_IROTH)

[root@V0 pyscripts]# ll  /osdir/ #注意权限变化 passwd
总用量 4
lrwxrwxrwx 1 root root   10 4月   4 16:30 copyhosts -> /etc/hosts
drwxr-xr-x 2 root root    6 4月   4 16:39 dir2
-rwxr--r-- 1 root root 2059 4月   4 16:35 passwd

>>> oct(os.stat('passwd').st_mode)
'0o100744'
>>> 



stat.S_IRWXU: Read, write, and execute by owner. 对于拥有者读写执行的权限

stat.S_IRUSR: Read by owner. 对于拥有者读的权限

stat.S_IWUSR: Write by owner. 对于拥有者写的权限

stat.S_IXUSR: Execute by owner. 对于拥有者执行的权限

stat.S_IRWXG: Read, write, and execute by group. 对于同组的人读写执行的权限

stat.S_IRGRP: Read by group. 对于同组读的权限

stat.S_IWGRP: Write by group. 对于同组写的权限

stat.S_IXGRP: Execute by group. 对于同组执行的权限

stat.S_IRWXO: Read, write, and execute by others. 对于其他组读写执行的权限

stat.S_IROTH: Read by others. 对于其他组读的权限

stat.S_IWOTH: Write by others. 对于其他组写的权限

stat.S_IXOTH: Execute by others. 对于其他组执行的权限 

----------------------------  #改变权限的操作 --------------------------









pickle     英 [ˈpɪkl]  美 [ˈpɪkəl]  
     vt.腌渍（泡菜等）
     n.腌菜，泡菜;腌制食品;

pickle模块简介
•  把数据写入文件时,常规的文件方法只能把字符串对象写入。
其他数据需先转换成字符串再写入文件 。

•  python提供了一个标准的模块,
称为pickle。
使用它可以在一个文件中储存任何python对象,
之后又可以把它完整无缺地取出来



pickle模块方法
•  分别调用dump()和load()可以存储、写入























