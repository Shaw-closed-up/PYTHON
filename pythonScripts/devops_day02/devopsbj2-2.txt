

[root@room9pc01 ~]# for  i  in  V{0..2};do virsh shutdown  $i; done;

pip3：（Python3  Install Package ）

pip3命令是python3中用来安装与管理包的命令工具

python3有丰富的第三方库（模块），都要用到这个命令工具来安装

PyPI(Python Package Index)是python官方的第三方仓库，
所有人都可以下载第三方库或上传自己开发的库到PyPI。
PyPI推荐使用pip包管理器来下载第三方库

[root@V2 ~]# cd    pyscripts/
[root@V2 pyscripts]# mkdir   .pip
[root@V2 pyscripts]# vim    .pip/pip.conf

--------------------------  此配置文件  .pip/pip.conf 可以加快 网络安装模块 -------------
--------------------- http://pypi.doubanio.com/simple/

[root@V2 pyscripts]# cat    .pip/pip.conf

[global]
index-url = http://pypi.doubanio.com/simple/
[install]
trusted-host = pypi.doubanio.com

[root@V2 pyscripts]# pip3
pip3    pip3.6  
[root@V2 pyscripts]# pip3   --version      #老版本 10.0.1 
pip 10.0.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)

[root@V2 pyscripts]# pip3   install    --upgrade   pip
.....................
    Uninstalling pip-10.0.1:
      Successfully uninstalled pip-10.0.1
Successfully installed pip-19.0.3


[root@V2 pyscripts]# pip3   --version     #版本已经升级了19.0.3 
pip 19.0.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)


[root@V2 pyscripts]# pip3   install   pymysql


Collecting pymysql
  Downloading https://files.pythonhosted.org/packages/ed/39/15045ae46f2a123019aa968dfcba0396c161c20f855f11dea6796bcaae95/PyMySQL-0.9.3-py2.py3-none-any.whl (47kB)
    100% |████████████████████████████████| 51kB 182kB/s 
Installing collected packages: pymysql
Successfully installed pymysql-0.9.3


[root@V2 pyscripts]# python3
............
>>> import  pymysql
>>> 
[root@V2 pyscripts]# 
----------------------------- http://pypi.doubanio.com/simple/
==================================

[root@V0 devops_day02]# python3  pymysqltest.py
........................
pymysql.err.OperationalError: (1045, "Access denied for user 'root'@'V0' (using password: YES)")
pymysql.err.operationalerror:（1045，“拒绝用户'root'@'v0'的访问（使用密码：yes）”）

[root@V0 devops_day02]#  解决办法: 查看是否有用户名为空的用户，有的话干掉它
当你设置了用户a：’user0‘@‘%’

然后你的用户表里面有用户名为空的用户b：‘’@‘localhst’ 

当你用用户a登陆时会与b(空用户名身份)造成冲突。
所以干掉没有用户名的用户


使用grant all privileges on来更改用户对应某些库的远程权限

grant  all  privileges  on  库名.表名  to  '用户名'@'IP地址'  
identified  by  '密码'  with  grant  option;

flush privileges;

库名:要远程访问的数据库名称,所有的数据库使用“*” 
表名:要远程访问的数据库下的表的名称，所有的表使用“*” 
用户名:要赋给远程访问权限的用户名称 
IP地址:可以远程访问的电脑的IP地址，所有的地址使用“%” 
密码:要赋给远程访问权限的用户对应使用的密码
--------------------- 

[root@V0 devops_day02]# mysql  -uroot  -p123
.............
MariaDB [(none)]> select   user();
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+

MariaDB [(none)]> show  grants;
+------------------------------------------------------+
| Grants for root@localhost    |
+-----------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY PASSWORD '*23AE809DDACAF96AF0FD78ED04B6A265E05AA257' WITH GRANT OPTION |
| GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION |


MariaDB [(none)]> grant  all  privileges  on  *.*   to  'root'@'%'  identified 
               -> by  '123'   with    grant   option;

MariaDB [(none)]> grant  all   on  *.*  to  'root'@'192.168.%'
                > identified  by '123'  with  grant  option;


select  distinct concat(
'username: ''',user,'''@''',host,''' password:''',password,''';') 
from  mysql.user
------------------------------------ 查看所有的授权用户的信息(包含用户名 主机ip 密码)-----------------------------------
MariaDB [Contacts]> select  distinct concat('userName:''',user,'''@''',host,'''xxPasswordxx:''',password,''';') from mysql.user;


MariaDB [(none)]> select  distinct concat(
    -> 'username: ''',user,'''@''',host,''' password:''',password,''';') 
    -> from  mysql.user;

+------------------------------------------------------------------------------------+
| concat('username: ''',user,'''@''',host,''' password:''',password,''';')           |
+------------------------------------------------------------------------------------+
| username: 'root'@'localhost' password:'*23AE809DDACAF96AF0FD78ED04B6A265E05AA257'; |
| username: 'root'@'v0' password:'';                                                 |
| username: 'root'@'127.0.0.1' password:'';                                          |
| username: 'root'@'::1' password:'';                                                |
| username: ''@'localhost' password:'';                                              |
| username: ''@'v0' password:'';                                                     |
| username: 'root'@'%' password:'*23AE809DDACAF96AF0FD78ED04B6A265E05AA257';         |
| username: 'root'@'192.168.%' password:'*23AE809DDACAF96AF0FD78ED04B6A265E05AA257'; |

/*************************************
pymysql.err.operationalerror:（1045，“拒绝用户'root'@'v0'的访问（使用密码：yes）”）

[root@V0 devops_day02]#  解决办法: 查看是否有用户名为空的用户，有的话干掉它
当你设置了用户a：’user0‘@‘%’

然后你的用户表里面有用户名为空的用户b：‘’@‘localhst’ 

当你用用户a登陆时会与b(空用户名身份)造成冲突。
                         所以干掉 delete 没有用户名的用户where  user='';

MariaDB [(none)]> delete   from  mysql.user  where  user='';
Query OK, 2 rows affected (0.00 sec)

MariaDB [(none)]> select user,host,password from mysql.user;
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | v0        |                                           |
| root | 127.0.0.1 |                                           |
| root | ::1       |                                           |
| root | %         | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | 192.168.% | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+-----------+-------------------------------------------+
6 rows in set (0.00 sec)

MariaDB [(none)]> delete    from   mysql.user  where  password = '';
Query OK, 3 rows affected (0.00 sec)

MariaDB [(none)]> flush  privileges;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> select user,host,password from mysql.user;
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | %         | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
| root | 192.168.% | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |
+------+-----------+-------------------------------------------+
3 rows in set (0.00 sec)


MariaDB [(none)]> show  grants  for  'root'@'%';
+-----------------------------------------------+
| Grants for root@%        |
+-------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY PASSWORD '*23AE809DDACAF96AF0FD78ED04B6A265E05AA257' WITH GRANT OPTION |
+----------------------------------------------------+


MariaDB [(none)]> show  grants  for  'root'@'192.168.%';
+---------------------------------------------------------------------------------------------+
| Grants for root@192.168.%                          |
+--------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.%' IDENTIFIED BY PASSWORD '*23AE809DDACAF96AF0FD78ED04B6A265E05AA257' WITH GRANT OPTION |
+---------------------------------------------------------------------------------------+

MariaDB [(none)]> exit
Bye
[root@V0 devops_day02]# 


[root@V0 devops_day02]# systemctl   restart   mariadb
===========================================
....................
pymysql.err.OperationalError: (1045, "Access denied for user 'root'@'V0' (using password: YES)")

[root@V0 devops_day02]# python3  pymysqltest.py  #mysql的所有的空用户名空密码的记录都要删除
__name__ is __main__
 sys.argv[0]  is pymysqltest.py

[root@V0 devops_day02]# 

[root@V0 devops_day02]# scp   pymysqlcursor.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

TypeError: not enough arguments for format string
[root@V0 devops_day02]# 

[root@V0 devops_day02]# scp   pymysqltest.py    root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# scp    pymysqlfetch.py    root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02


WSGI协议
什么是WSGI
(1)、WSGI(Web 服务器网关接口)
是python中所定义的Web Server和Web APP之间或框架之间的接口标准规范

(2)、WSGI接口规范的目的
就是规范Web服务器与Web应用之间的交互，在协议之间进行转换
(3)、WSGI将Web组件分成三类：
Web服务器(Server)、Web中间件(Middleware)与Web应用程序(APP)。


alchemy      英 [ˈælkəmi]   美 [ˈælkəmi]  
    n.炼金术(见于中世纪，企图把普通金属炼成黄金);
       (改变事物的)神秘力量，魔力

SQLAlchemy简介

•  SQLAlchemy是Python编程语下的一款开源软件。
提供 SQL 具包及对象关系映 射(ORM) 工具,使用
MIT许可证发
•  SQLAlchemy“采用简单的Python语言,为高效和
高性能的数据库访问设计,实现了完整的企业级持久
模型”
•  SQLAlchemy的理念是,SQL数据库的量级和性能重
要于对象集合;而对象集合的抽象又重要于表和行
•  目标是提供能兼容众多数据库(如 SQLite、MySQL、
Postgresql、Oracle、MS-SQL、SQLServer 和
Firebird)的企业级持久性模型

，SQLAlchemy采用了类似于Java里Hibernate的数据映射模型，
而不是其他ORM框架采用的Active Record模型。
不过，Elixir和declarative等可选插件可以让用户使用声明语法。

SQLAlchemy首次发行于2006年2月，
并迅速地在Python社区中最广泛使用的ORM工具之一，
不亚于Django的 ORM 框架。 


•  ORM即对象关系映射
对象关系映射器（Object Relational Mappers，ORM）
就是在python中设定一个类，
在mysql中定义一个表，
把关系数据库的表结构映射到这个类上。

•  数据库表是一个二维表,包含多行多列。
把一个表的内容用Python的数据结构表示出来的话,
可以用一个list表示多行,
list的每一个元素是tuple,
表示一行记录
[
 ('1', 'Michael'),
 ('2', 'Bob'),
 ('3', 'Adam')
]
•  用tuple表示一行很难看出表的结构。
如果把一个tuple用class实例来表示,就可以更容易地看出表的结构来

操作前提  以下三点必须
 
1. 安装好Python 
2. 安装好mysql 
3. 安装好sqlalchemy包

dialect        英 [ˈdaɪəlekt] 
       n.地方话;土话;方言

dialogue       美 [ˈdaɪəlɔːɡ]  
       n.(书、戏剧或电影中的)对话，对白;

alchemy     美 [ˈælkəmi]  
    n.炼金术, 神秘力量，魔力

===================================

mysql  -uroot  -p123

create  database  alchemy  default charset 'utf8'; #炼金术

show  create   database  alchemy;

use   alchemy;

create  table  departments(   #部门表
dep_id int(4),                   #部门id号
dep_name varchar(20) not null unique,
primary key(dep_id)
);

create  table  employees(  #员工表
emp_id int(4),                 #员工id号
emp_name varchar(20)  not null,
gender  enum('male', 'female'),
birth_date  date,
phone_number  varchar(11),
email  varchar(50),
dep_id  int(4),
primary  key(emp_id),
foreign  key(dep_id) references  departments(dep_id) 
);          #外键-->部门表的部门id号


CREATE  table salary(     #员工薪水表
auto_id int(4) auto_increment,
date    date,
emp_id int(4),     #员工id号
basic  int(4),     #基本工资
award  int(4),     #奖金
primary  key(auto_id),
foreign key(emp_id) references  employees(emp_id) 
);          #外键-->员工表的员工id号


insert  into  departments  values(1, '人事部'),
(2, '开发部'),
(3, '运维部'), (4, '财务部') ,
(5, '市场部'), (6, '销售部') ;


insert  into  employees   values
( 1, '张三', 'male', '1985-04-02', '13302224455', 'zhsan@163.com', 1),
( 2, '李四', 'male', '1990-03-05', '15099887766', 'lisi@qq.com', 1),
( 3, '王五', 'female', '2000-10-10', '13802381238', 'wgwu@qq.com',2);

insert  into  salary
(date,  emp_id,  basic,  award)
values
('2018-11-11', 1, 10000, 2000),
('2018-01-10', 2, 8000, 1500);

select  bm.emp_name, bm2.date,
bm2.basic + bm2.award as  total
from  employees as bm
left  join  salary  as  bm2
on  bm.emp_id = bm2.emp_id;

#-------------------------------------------------------------------

mysql  -uroot -p123  -e  "use pysql; \
select  bm.emp_name, bm2.date,   \
bm2.basic + bm2.award as  total   \
from  employees as bm     \
left  join  salary  as  bm2    \
on  bm.emp_id = bm2.emp_id;"


delete  from  mysql.user  where  password='';

grant  all  privileges  on  *.*  to  'root'@'%'
identified by '123'  with grant option;

flush  privileges;

select  distinct  concat(
'userName: ''',user,'''@''',host,''' Password: ''',password,''';')
from  mysql.user;

show  grants  for  'root'@'%';


mysql  -uroot -p123  -e  "use pysql;select  *  from  departments;"

mysql -uroot -p123 -e "use pysql;select *  from  employees;"
 
mysql -uroot -p123 -e "use pysql;select *  from  salary;"

===============================

步骤一：SQLAlchemy安装

[root@V0 devops_day02]# pip3   install   sqlalchemy
Collecting sqlalchemy
  Downloading https://files.pythonhosted.org/packages/2b/b2/e6f5c5efc68942edefaa924e8fbea0b32375baa434a511cbf6bb17769cf6/SQLAlchemy-1.3.3.tar.gz (5.9MB)
...........................
Successfully installed sqlalchemy-1.3.3
[root@V0 devops_day02]# 


步骤二：为SQLAlchemy创建数据库

[root@V0 devops_day02]# mysql  -uroot  -p123
....................

MariaDB [(none)]> create  database  alchemy  default charset 'utf8'; #炼金术

MariaDB [(none)]> show  databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| alchemy            |
| mysql              |
| performance_schema |
| pysql              |
| test               |
+--------------------+
6 rows in set (0.00 sec)


MariaDB [(none)]> show  create   database  alchemy;
+----------+------------------------------------------------------------------+
| Database | Create Database    |
+----------+------------------------------------------------------------------+
| alchemy  | CREATE DATABASE `alchemy` /*!40100 DEFAULT CHARACTER SET utf8 */ |


# sqlalchemy.create_engine()
alchemy     美 [ˈælkəmi]  
    n.炼金术, 神秘力量，魔力

oracle     美 [ˈɔːrəkl]  
n.
(古希腊的)神示所;(传达神谕的)牧师，女祭司;
(古希腊常有隐含意义的)神谕，神示;
能提供宝贵信息的人(或书);权威;智囊

oracle     美 [ˈɔːrəkl]  
     n. 权威;智囊

[root@V0 devops_day02]# python3
Python 3.6.7 (default, Apr  2 2019, 11:30:00) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-16)] on linux
Type "help", "copyright", "credits" or "license" for more information.

>>> import  sqlalchemy
>>> sqlalchemy.ex
sqlalchemy.exc          sqlalchemy.except_all(  sqlalchemy.extract(
sqlalchemy.except_(     sqlalchemy.exists(   
   
>>> Base = sqlalchemy.ext.declarative.declarative_base()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'sqlalchemy' has no attribute 'ext'

>>> import  sys, pymysql
>>> 
>>> from   sqlalchemy  import  create_engine, Column, Integer, String
>>> 
>>> from   sqlalchemy.ext.declarative  import  declarative_base

>>> Base = declarative_base()   #创建映射类的基本类
>>> print('type(Base)= %s,  Base= %s, Base.__table__ = %s' % \
...       (type(Base), Base, Base.__table__))
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
AttributeError: type object 'Base' has no attribute '__table__'

>>> Base.m
Base.metadata  Base.mro(      
>>> Base.__
Base.__abstractmethods__  Base.__getattribute__(    Base.__qualname__
Base.__base__(            Base.__gt__(              Base.__reduce__(
Base.__bases__            Base.__hash__(            Base.__reduce_ex__(
Base.__basicsize__        Base.__init__(            Base.__repr__(
Base.__call__(            Base.__init_subclass__(   Base.__setattr__(
Base.__class__(           Base.__instancecheck__(   Base.__sizeof__(
Base.__delattr__(         Base.__itemsize__         Base.__str__(
Base.__dict__             Base.__le__(              Base.__subclasscheck__(
Base.__dictoffset__       Base.__lt__(              Base.__subclasses__(
Base.__dir__(             Base.__module__           Base.__subclasshook__(
Base.__doc__              Base.__mro__              Base.__text_signature__
Base.__eq__(              Base.__name__             Base.__weakref__
Base.__flags__            Base.__ne__(              Base.__weakrefoffset__
Base.__format__(          Base.__new__(             
Base.__ge__(              Base.__prepare__(         
>>> Base.__

>>> Base = sqlalchemy.ext.declarative.declarative_base()
>>> Base
<class 'sqlalchemy.ext.declarative.api.Base'>
>>> type(Base)
<class 'sqlalchemy.ext.declarative.api.DeclarativeMeta'>
>>> 
>>> import    sqlalchemy.ext

>>> sqlalchemy.ext.
sqlalchemy.ext.baked        sqlalchemy.ext.declarative

>>> 
>>> sqlalchemy.ext.declarative.
sqlalchemy.ext.declarative.AbstractConcreteBase(
sqlalchemy.ext.declarative.ConcreteBase(
sqlalchemy.ext.declarative.DeclarativeMeta(
sqlalchemy.ext.declarative.DeferredReflection(
sqlalchemy.ext.declarative.api
sqlalchemy.ext.declarative.as_declarative(
sqlalchemy.ext.declarative.base
sqlalchemy.ext.declarative.clsregistry
sqlalchemy.ext.declarative.comparable_using(
sqlalchemy.ext.declarative.declarative_base(
sqlalchemy.ext.declarative.declared_attr(
sqlalchemy.ext.declarative.has_inherited_table(
sqlalchemy.ext.declarative.instrument_declarative(
sqlalchemy.ext.declarative.synonym_for(
>>> 
>>> import   sqlalchemy
>>> sqlalchemy.
    sqlalchemy.create_engine(
sqlalchemy.Column(  
sqlalchemy.Integer(
sqlalchemy.String( 



[root@V0 devops_day02]# python3  alchemy_create_engine.py
__name__ is __main__
type(enginex) = <class 'sqlalchemy.engine.base.Engine'>,  enginex = Engine(mysql+pymysql://root:***@192.168.1.11/alchemy)

 sys.argv[0]  is alchemy_create_engine.py

Departments.__table__ = departmentsxxxxxxxxx, type(Departments) = <class 'sqlalchemy.ext.declarative.api.DeclarativeMeta'>


[root@V0 devops_day02]# python3 
..........
>>> import   alchemy_create_engine   #自己写的文件alchemy_create_engine.py
__name__ is alchemy_create_engine
type(enginex) = <class 'sqlalchemy.engine.base.Engine'>,  enginex = Engine(mysql+pymysql://root:***@192.168.1.11/alchemy)

>>> 
>>> alchemy_create_engine.Departments.__tablename__
'departmentsxxxxxxxxx'

>>>
>>> type(alchemy_create_engine.Departments.__table__)
<class 'sqlalchemy.sql.schema.Table'>
>>> 
>>> alchemy_create_engine.Departments.__table__

Table('departmentsxxxxxxxxx', MetaData(bind=None), Column('dep_id', Integer(), table=<departmentsxxxxxxxxx>, primary_key=True, nullable=False), Column('dep_name', String(length=20), table=<departmentsxxxxxxxxx>), schema=None)

schema: (None)表的模式（一般默认是数据库名, 无需特别指定; 
Oracle中是owner, 当一个数据库由多个用户管理时，
用户的默认数据库不是要连接的数据库时，需要指定此项）

comment: 注释

metadata 元数据对象
print('Base.metadata.create_all = %s, type(Base.metadata.create_all)= %s\n' \
      %  (Base.metadata.create_all, type(Base.metadata.create_all)))
#Base.metadata.create_all = <bound method MetaData.create_all of MetaData(bind=None)>, type(Base.metadata.create_all)= <class 'method'>


>>> print(alchemy_create_engine.Departments.__table__)
departmentsxxxxxxxxx

>>> print(alchemy_create_engine.Departments.__tablename__)
departmentsxxxxxxxxx
>>> 

schema      英 [ˈskiːmə]
   n.(计划或理论的)提要，纲要

[root@V1 pyscripts]# mysql  -uroot  -p123  -e  "
> create  database  alchemy  default charset 'utf8';
> show  databases;"
+--------------------+
| Database           |
+--------------------+
| information_schema |
| alchemy            |
| mysql              |
| performance_schema |
| pysql              |
| test               |
+--------------------+
[root@V1 pyscripts]#


[root@V2 pyscripts]# mysql  -uroot  -p123  -e  "
> create  database  alchemy  default charset 'utf8';
> show  databases;"
+--------------------+
| Database           |
+--------------------+
| information_schema |
| alchemy            |
| mysql              |
| performance_schema |
| pysql              |
| test               |
+--------------------+
[root@V2 pyscripts]# 


---------------------------------
#!/usr/bin/env  python3
#coding:UTF-8


from   sqlalchemy  import  create_engine, Column, Integer, String

from   sqlalchemy.ext.declarative  import  declarative_base


  ##create_engine('使用的数据库类型(比如mysql,oracle等) + python的pymysql模块://用户名:用户的密码@连接的数据库服务器主机/主机上的数据库名',encoding='utf8', echo=True)
#echo=True表示将日志输出到终端屏幕,默认为False
         
enginex = create_engine(
  'mysql + pymysql://root:123@192.168.1.11/alchemy',
  encoding= 'utf8',
  echo = True
)
#首先通过声明系统,定义基类Base
Base = declarative_base() #创建映射类的基本类


sqlalchemy.exc.ArgumentError: Could not parse rfc1738 URL from string 'mysql + pymysql://root:123@192.168.1.11/alchemy'

sqlachemy.exc.argumenterror:无法从字符串'mysql+pymysql://root:123@192.168.1.11/alchemy'分析rfc1738 URL

[root@V0 devops_day02]# systemctl is-active  mariadb
active

[root@V0 devops_day02]# scp    alchemy_create_engine.py  root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02


如果有中文件,注意engine的参数

engine = create_engine('mysql+pymysql://root:tedu.cn@localhost/
tarena?charset=utf8', encoding='utf8', echo=True)

enginex = create_engine(
  'mysql+pymysql://root:123@192.168.1.11/alchemy?charset=utf8',#这里不能有空格,在连接数据库的时候声明编码'utf8'
  encoding = 'utf-8', #这里可以有空格,设置引擎编码方式为utf-8
  echo = True
)

设置数据库表编码方式为utf8
from sqlalchemy import Column,ForeignKey,Integer,String,UniqueConstraint,Float,DateTime,Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship,sessionmaker
from sqlalchemy import create_engine
 
Base = declarative_base()
 
 
class User(Base):
    __tablename__ = 'tb_user’
		id = Column(Integer,primary_key = True,autoincrement=True)
    name = Column(String(250),nullable=False,unique = True,comment=u"姓名")
    __table_args__ = {
        "mysql_charset" : "utf8"
}

--------------------- 
设置mysql编码：

--在 [mysql]  标签下加上一行

default-character-set = utf8

 

--在 [mysql.server]标签下加上一行

default-character-set = utf8

 

--在 [mysqld_safe]标签下加上一行

default-character-set = utf8

 

--在 [client]标签下加上一行

default-character-set = utf8

重启服务：service mysql restart
--------------------- 

命令行连接
mysql -u 用户名 -p密码 -h 服务器IP地址 -P 服务器端MySQL端口号  -D 数据库名 -e  相关mysql的sql语句
注意：
    (1)服务器端口标志-P一定要大些以区别于用户-p,如果直接连接数据库标志-D也要大写；
    (2)如果要直接输入密码-p后面不能留有空格如-pmypassword;
    (3)命令结束段没有';'分号。
--------------------- 


[root@V1 pyscripts]# mysql  --help
  -A, --no-auto-rehash 
无自动刷新。
一个人必须使用“重新粉刷”来完成表和字段。
这样可以更快地启动MySQL并禁用重新连接时的刷新。

  -D, --database=name 数据库使用

[root@V0 devops_day02]# mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy -e "
> show tables;"
+-------------------+
| Tables_in_alchemy |
+-------------------+
| departments       |
+-------------------+
[root@V0 devops_day02]# mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy -e "
> drop  table   departments; show tables;"
[root@V0 devops_day02]# 


mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy -e "
drop  table   departments; show tables;"


mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy -e "
show tables;"

=========================================

import  sys,  subprocess

from   sqlalchemy  import  create_engine, Column, Integer, String
from   sqlalchemy.ext.declarative  import  declarative_base
from   sqlalchemy.orm  import  sessionmaker

enginex = create_engine(
  #  在连接数据库的时候声明编码'utf8'
  'mysql+pymysql://root:123@192.168.1.11/alchemy?charset=utf8',#这里不能有空格
  encoding = 'utf-8', #这里可以有空格,设置引擎编码方式为utf-8
  echo = True
)

#首先通过声明系统,定义基类Base, 使用声明层作为基类
Base = declarative_base() #创建映射类的基本类

class  Departments(Base):  #继承基本类Base

  #在alchemy数据库中创建的表名'departments'
  #对__tablename__进行赋值，确定表名
  __tablename__ = 'departments'   #库中的表名
  __table_args__ = { "mysql_charset" : "utf8" } #设置数据库表编码方式为utf8

  #Integer整数类型, autoincrement数字自动增加1,primary_key主键
  dep_id = Column(Integer, autoincrement= True, primary_key= True)

  # String字符串类型，nullable非空约束，unique唯一性约束
  dep_name = Column(String(20), nullable= False, unique= True)

  def  __str__(self):  #打印/显示实例时调用内建方法str
    return  '<Departments(dep_name= %s)>'  %  self.dep_name


if __name__ == '__main__':
  print('\033[30;43;1m sys.argv[0]  is %s\n\033[0m' % sys.argv[0])

  mysqlshell= 'mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy \
    -e "drop  table   departments;"'
  returncmd = subprocess.call(mysqlshell, shell = True)
  #无法返回命令的输出,只会返回函数运行成功与否的0或其他值。
  if returncmd == 0:
    print('-----------OK----------------\n')
  else:
    print('-----returncmd = %d -------\n' % returncmd)


  Base.metadata.create_all(enginex)

-----------------------结果--------------------------
CREATE TABLE departments (
	dep_id INTEGER NOT NULL AUTO_INCREMENT, 
	dep_name VARCHAR(20) NOT NULL, 
	PRIMARY KEY (dep_id), 
	UNIQUE (dep_name)
)CHARSET=utf8
-------------------------------------------


#创建映射类的实例时,并不会真正在表中添加记录
  hr = Departments(dep_name='人事部')

  print('type(hr)= %s,   hr= %s\n' % (type(hr), hr))
type(hr)= <class '__main__.Departments'>,   hr= <Departments(dep_name= 人事部)>

  print('hr.dep_id= %s, hr.dep_name= %s, type(hr.dep_id)= %s\n' \
      % (hr.dep_id, hr.dep_name, type(hr.dep_id)))

#hr.dep_id= None, hr.dep_name= 人事部, type(hr.dep_id)= <class 'NoneType'>
#创建映射类的实例时,并不会真正在表中添加记录

  mysqlshell= "date"
  rcmd = subprocess.check_output(mysqlshell).decode("utf-8") #返回系统shell命令>的返回值
  if rcmd:
    print('-----OK ---- rcmd is:\n%s --------\n' % rcmd)
#-----OK ---- rcmd is:
#2019年 04月 24日 星期三 13:10:21 CST
# --------
  else:
    print('----- rcmd = %s -------\n' % rcmd)

  sqlcmd = "\'show  tables;select  dep_id, dep_name  from  departments;\'"
  mysqlshell= "mysql -uroot -p123 -h192.168.0.11 -P3306 -D alchemy  -e  %s" %  sqlcmd
  rcmd2 = subprocess.call(mysqlshell, shell = True)
+-------------------+
| Tables_in_alchemy |
+-------------------+
| departments       |
+-------------------+

  if rcmd2 == 0:
    print('-----OK ---- rcmd2  --------\n')
-----OK ---- rcmd2  --------
  else:
    print('----- rcmd2 = %d -------\n' % rcmd2)


[root@V0 devops_day02]# scp    alchemy_create_engine2.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02


[root@V0 devops_day02]# scp   alchemy_create_engine3.py    root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# scp   alchemy_create_engine4.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# scp   alchemy_create_engine6.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# scp    alchemy_ORM.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# python3
..............
>>> import  datetime
>>> 
>>> datetime.datetime.now()
datetime.datetime(2019, 4, 24, 18, 35, 45, 117943)
>>>
>>> date = datetime.datetime.da
datetime.datetime.date(  datetime.datetime.day  
>>>
>>> date = datetime.datetime.date(datetime.datetime.now())
>>> date
datetime.date(2019, 4, 24)
>>> 
>>> quit()
[root@V0 devops_day02]# python3
...............
>>> from   datetime  import  datetime
>>> datetime.now()
datetime.datetime(2019, 4, 24, 18, 39, 16, 484021)
>>> date = datetime.da
datetime.date(  datetime.day    
>>> date = datetime.date(datetime.now())
>>> 
>>> date
datetime.date(2019, 4, 24)
>>> type(date)
<class 'datetime.date'>
>>> print(date)
2019-04-24
>>> 

[root@V1 pyscripts]# mysql -uroot -p123  -e  "use alchemy;show tables;"

mysql -uroot -p123  -e  "use alchemy;delete  from  salary;"
mysql -uroot -p123  -e  "use alchemy;delete  from  employees;"
mysql -uroot -p123  -e  "use alchemy;delete  from  departments;"

mysql -uroot -p123  -e  "use alchemy;select  *  from  departments;"
mysql -uroot -p123  -e  "use alchemy;select  *  from  employees;"
mysql -uroot -p123  -e  "use alchemy;select  *  from  salary;"




dep_hr = Departments(dep_name='人力部')
dep_dev = Departments(dep_name='开发部')
dep_ops = Departments(dep_name='运维部')
dep_finance = Departments(dep_name='财务部')

emp_bob = Employees(
  emp_name='bob',
  gender = 'male',
  phone = '13302381238',
  email = 'bob@qq.com',
  dep_id = 1
)

emp_alice = Employees(
  emp_name='alice',
  gender = 'female',
  phone = '15802381238',
  email = 'alice@qq.com',
  dep_id = 1
)

emp_zs = Employees(
  emp_name='张三',
  gender = 'male',
  phone = '15802581238',
  email = 'zs@qq.com',
  dep_id = 1
)

emp_lisi = Employees(
  emp_name='李四',
  gender = 'male',
  phone = '13305881255',
  email = 'lisi@qq.com',
  dep_id = 2
)

emp_ww = Employees(
  emp_name='王五',
  gender = 'male',
  phone = '13302381238',
  email = 'ww@qq.com',
  dep_id = 2
)

emp_zl = Employees(
  emp_name='赵六',
  gender = 'female',
  phone = '13502381258',
  email = 'zhaoliu@qq.com',
  dep_id = 3
)

emp_peri = Employees(
  emp_name='peri',
  gender = 'female',
  phone = '15802381258',
  email = 'peri@qq.com',
  dep_id = 4
)

##添加单个实例的记录
session.add(emp_bob)

##批量添加多个实例的记录
session.add_all([emp_alice, emp_zs, emp_lisi, emp_ww, emp_zl, emp_peri])

##创建多个实例
sal_bob_201904 

sal_bob_201804

[root@V0 devops_day02]# scp   alchemy_create_engine_insert.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02

[root@V0 devops_day02]# scp   alchemy_ORM.py    root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day02






