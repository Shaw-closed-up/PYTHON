



===============================================

Python3之GIL全局解释器锁

GIL全局解释器锁： 
    同一进程下的多线程共享数据，共享意味着竞争，竞争带来无序，
为了数据安全所以需要  加锁 进行数据保护，
GIL本质是一把互斥锁，  使并发变为串行，
保证同一时间只有一条线程访问解释器级别的数据，
这样就保证了解释器级别的数据安全，
同时也带来了一些问题，同一进程只有一条线程执行任务，
无法利用多核优势，
解决方案可以根据任务的类型来处理，
如果是I/O密集型，则需要开多线程提高效率，
如果是计算密集型则需要多进程。
--------------------- 
在CPython中，全局解释器锁(GIL)，
本质是一把互斥锁。
用于防止本地线程，多次调用执行Python字节码。
这把锁存在的必要，是因为CPython的 内存管理 不是 线程安全的。
然而，自从GIL存在，其他功能已经发展到 依赖于它所执行的保证。

GIL下的多进程和多线程

 - 多线程、多进程效率测试

 - 计算密集型：多进程效率高, 不适合多线程

- I/O密集型：多线程效率高(例如ping操作是输入输出操作,适合使用)

GIL和Lock（即全局解释器锁和本地锁）


系统层面的线程处理：

1 系统开启多线程
2 线程编译代码，查找语法错误
3 调用解释器外的GIL锁
4 抢到GIL锁的线程，调用解释器执行程序代码
5 结束代码执行，释放GIL锁


CPU单核： ====> 都选择使用线程
多任务处理计算密集型，无法实现并行，
创建进程的开销大。
选择开启一个进程，多个线程。

多任务处理I/O密集型，无法实现并行的进程开销又大，
而切换进程的速度不如线程快。
选择开启一个进程，多个线程。

 

CPU多核：

多任务处理计算密集型，多核实现进程并行，对于线程无法实现并行。
选择开启多个进程。

多任务处理I/O密集型，多核情况下进程并发，
线程在一个cpu核内(cpu不固定，任意切换)进行切换并发，
差别在于并发的切换速度。
选择开启一个进程，多个线程。

 

结论：由于市场上基本上是多核处理器，开发多是IO密集型程序，则对于性能的提升多用多线程。


GIL总结：

GIL本质是一把互斥锁，相当于使用Cpython解释器的权限，
默认每一个进程内都存在一把GIL。
同一进程内的多个线程必须抢到GIL后才能使用Cpython解释器执行代码。
同一个进程下的多个线程无法实现并行，但是可以实现并发。
若想要以线程实现并行，则需要开启多个进程实现。
--------------------- 

cpu缓存 大小 直接影响CPU的读取速度，
cpu缓存 是 介于 内存与CPU 之间的存储器，
  容量 比 内存 小，
但速度 比 内存 快， 他可以大大减少CPU 访问 内存 的时间

cpu缓存的部件，由若干缓存段组成，
每个缓存段 具有 连续内存地址的 若干个 存储单元。

缓存的工作原理；
  CPU需要读取一个数据的时候，
首先会从高速缓存中查找，
如果找到就会立即读取并发送给CPU处理，
如果没找到 就 以较慢的速度 去 内存 中读取并发送给CPU，
同时在把 这个数据所需要的数据块 调入高速缓存内，
 后面再读取数据的时候直接从cpu缓存 读取，
不必再调用内存。

CPU二级缓存 编辑
CPU缓存（Cache Memory）位于CPU与内存之间的临时存储器，
它的  容量比  内存小
但 交换速度 快。

在缓存中的数据是内存中的一小部分，
但这一小部分是短时间内CPU即将访问的，
当CPU调用大量数据时，就可避开内存直接从缓存中调用，
从而加快读取速度。

而二级缓存则是介于 一级缓存 和 内存之间的存储器，
其容量较 大于 一级缓存、 远小于内存，

主要用来协调一级缓存 与 内存之间的速率差。

一级缓存中还分数据缓存（Data Cache，D-Cache）
和指令缓存（Instruction Cache，I-Cache）。
二者分别用来存放数据
和执行这些数据的指令，
而且两者可以同时被CPU访问，
减少了争用Cache所造成的冲突，提高了处理器效能。


随着CPU制造工艺的发展，二级缓存也能轻易的集成在CPU内核中，容量也在逐年提升

二级缓存是CPU性能表现的关键之一，
在CPU核心不变化的情况下，
增加二级缓存容量能使性能大幅度提高。
而同一核心的CPU高低端之分往往也是在二级缓存上有差异，
由此可见二级缓存对于CPU的重要性。

缓存替换编辑
CPU在缓存中找到有用的数据 被称为 命中，

当缓存中没有CPU所需的数据时（这时称为未命中），CPU才访问内存。

从理论上讲，在一颗拥有二级缓存的CPU中，
读取一级缓存的命中率为80%。

也就是说CPU一级缓存中找到的有用数据占数据总量的80%，

剩下的20%从二级缓存中读取。

由于不能准确预测将要执行的数据，
读取二级缓存的命中率也在80%左右（从二级缓存读到有用的数据占总数据的16%）。

那么还有的数据就不得不从内存调用，但这已经是一个相当小的比例了。

目前的较高端的CPU中，
还会带有三级缓存，
它是为读取二级缓存后未命中的数据设计的—种缓存，

在拥有三级缓存的CPU中，
只有约5%的数据需要从内存中调用，这进一步提高了CPU的效率。

为了保证CPU访问时有较高的命中率，缓存中的内容应该按一定的算法替换。

一种较常用的算法是“最近最少使用算法”（LRU算法），
它是将最近一段时间内最少被访问过的行淘汰出局。

因此需要为每行设置一个计数器，
LRU算法是把命中行的计数器清零，
其他各行计数器加1。

当需要替换时淘汰行计数器计数值最大的数据行出局。

这是一种高效、科学的算法，
其计数器清零过程可以把一些频繁调用后再不需要的数据淘汰出缓存，提高缓存的利用率。


缓存容量编辑
CPU产品中，一级缓存的容量基本在4KB到64KB之间，

二级缓存的容量则分为128KB、256KB、512KB、1MB、2MB等。

一级缓存容量各产品之间相差不大，

而二级缓存容量则是提高CPU性能的关键。

二级缓存容量的提升是由CPU制造工艺所决定的，
容量增大必然导致CPU内部晶体管数的增加，
要在有限的CPU面积上集成更大的缓存，对制造工艺的要求也就越高

CPU的二级缓存一般情况下你感觉不是很明显。
但是它的作用却不可忽视。
它是暂存CPU运算时的数据的。

硬盘的缓存主要在读/写的时候很突出。


什么是上下文切换

即使是单核CPU也支持多线程执行代码，
CPU通过给每个线程分配CPU时间片来实现这个机制。

时间片是CPU分配给各个线程的时间，因为时间片非常短，
所以CPU通过不停地切换线程执行，
让我们感觉多个线程时同时执行的，
时间片一般是几十毫秒（ms）。

CPU通过时间片分配算法来循环执行任务，
当前任务执行一个时间片后会切换到下一个任务。
但是，在切换前会保存上一个任务的状态，
  以便下次切换回 这个任务时，可以再次加载这个任务的状态，
从任务保存到再加载的过程
就是一次上下文切换。

上下文切换 会影响多线程的执行速度


[root@V0 devops_day01]# scp  root@192.168.1.254:/var/git/PYTHON/pythonScripts/devops_day01/tcp_time_server_oop2.py  .


  File "threadingtcp_server_oop.py", line 52, in handle_child
    databytes = cli_sock.recv(1024) #接收客户端信息，一次接收数据的大小最多是1024字节
OSError: [Errno 9] Bad file descriptor

oserror:[errno 9]错误的文件描述符

#第六步,处理阶段，服务器与客户端通过send和recv方法通信(传输数据)
#      self.handle_child(cli_sock)
      thr = threading.Thread(target=self.handle_child, args = (cli_sock,))
      thr.start()

#第七步,传输结束，关闭链接
#    cli_sock.close() #关闭客户端链接
#    print('\n本次服务端与客户端的对话结束,可以开启下一个新的对话连接\n')

#第六步,处理阶段，服务器与客户端通过send和recv方法通信(传输数据)
#调用新链接对象cli_sock 与客户端cli_addr 或者服务器通信
  def  handle_child(self,cli_sock):
    while  True:
      try:
        databytes = cli_sock.recv(1024) #接收客户端信息，一次接收数据的大小最多是1024字节
      except  KeyboardInterrupt:
        print('--- 在接收客户端信息的时候服务端Ctrl + C 将会退出客户端与服务端的对话程序!')  
        break
      print('接受的客户端二进制信息是\n', [databytes])
#接受的客户端二进制信息是
# [b'\t']
# [b'']

      try:
        datastr = str(databytes, encoding='utf8')  #将客户端发送的二进制文字转utf8字符串格式

      except   UnicodeDecodeError  as  ue :
        print('\n客户端执行 Ctrl + C会发生错误UnicodeDecodeError\n', ue)
        break
      print('---接受的客户端信息转utf8字符串格式\n', datastr)

      if  not datastr.strip(): #如果客户端输入任意连续的空字符(包括\r\v\t 空格)
        break
      data = '[%s] %s' % (self.date, datastr)  #注意这里的属性日期变量date

#服务端V0调用新链接对象 cli_sock 发送二进制信息bytes(data, encoding='utf8')给客户端
      serverV0 = cli_sock.sendall(bytes(data, encoding='utf8'))
      print('cli_sock.sendall()--serverV0返回信息\n%s---%s' %  (serverV0, type(serverV0)))
#cli_sock.sendall()--serverV0返回信息
#None---<class 'NoneType'>

#第七步,传输结束，关闭链接
    cli_sock.close() #关闭客户端链接 #注意逻辑层次,缩进格式
    print('\n本次服务端与客户端的对话结束,可以开启下一个新的对话连接\n')

[root@V0 devops_day01]# scp   threadingtcp_server_oop.py  root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day01


[root@V0 devops_day01]# scp    tcp_time_server_oop2.py   root@192.168.0.254:/var/git/PYTHON/pythonScripts/devops_day01


.  匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
[...]用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...]不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。
*匹配0个或多个的表达式。
+匹配1个或多个的表达式。
?匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式


(单选题)os.waitpid(-1, 0)的说法正确的是
A.不挂起父进程
 B.挂起父进程，等待所有子进程完成
 C.挂起父进程，等待当前子进程完成
 D.设置参数有错误，代码执行时会报错
【正确答案】B
【答题时间】2019-04-21 05:08:56
【答案解析】os.waitpid()的第一个参数如果大于0，表示等待该pid号进程结束，
等于 0 表示等待 当前 子进程结束，  -1 表示等待所有子进程结束，
第二个参数为0表示挂起父进程，  为1 表示不挂起父进程


(单选题)关于多线程工作特点说法错误的是
A.由于在一个进程下边，本质上是同步进行
 B.各个线程的运行顺序是随机的，不确定的
 C.程序可以被分成多个执行流，每个流完成独立的目标
 D.每个流执行的结果最后汇总，合并成最后的结果
【正确答案】A
【答题时间】2019-04-21 05:08:56
【答案解析】多线程本质上就是异步的，需要多个事务并发执行

异步就是多个事件同时发生运行,不分顺序
是一种并行处理的方式，不必等待一个程序执行完，
可以同时执行其它的任务,不需要等待


同步就是多个事件按照时间或锁机制的先后顺序一次次地排队等待运行
是一种线性执行的方式, 需要等待


计算机领域中的同步（Synchronous）和异步（Asynchronous）
-------------************************** ------------------------------------------------
    计算机领域中的  同步和异步 的 概念
和我们平时生活中的  同步和异步 是 不一样的。

同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。
是一种线性执行的方式，执行的流程不能跨越。
一般用于流程性比较强的程序，
比如用户登录，需要对用户验证完成后才能登录系统。


异步则是只是发送了调用的指令，
调用者 无 需 等待被调用的方法 完全执行完毕；
 而是继续执行下面的流程。
是一种并行处理的方式，
不必等待一个程序执行完，可以执行其它的任务，
比如页面数据加载过程，不需要等所有数据获取后再显示页面。


entity    英 [ˈentəti]   美 [ˈentəti]  
   n.独立存在物;实体

relationship    英 [rɪˈleɪʃnʃɪp]   美 [rɪˈleɪʃnʃɪp]  
   n.(人、团体、国家之间的)关系，联系;
      情爱关系;性爱关系;(事物之间的)关联，关系

diagram    英 [ˈdaɪəɡræm]   美 [ˈdaɪəɡræm]  
   n.简图;图解;图表;示意图

model          英 [ˈmɒdl]   美 [ˈmɑːdl]  
n.(依照实物按比例制成的)模型;样式;设计;型;(用于示范运作方法等的)模型
v.做模特儿;(向顾客)穿戴展示;将…做成模型;复制


NoSQL=Not Only SQL
NoSQL，泛指非关系型的数据库

实体关系模型（Entity Relationship Diagram）

E-R图（Entity Relationship Diagram）即实体联系图，也称实体关系图，
是指提供了表示实体型、属性和联系的方法，
用来描述现实世界的概念模型。
E-R方法是“实体-联系方法”（Entity-Relationship Approach）的简称。
它是描述现实世界概念结构模型的有效方法。

使用实体-联系图(entity-relationship diagram)来建立数据模型。
可以把实体-联系图简称为ER图

联系(Relationship)： 数据对象彼此之间相互连接的方式称为联系，也称为关系。
联系可分为以下 3 种类型：
(1) 一对一联系 (1 ∶ 1)
(2) 一对多联系 (1 ∶ N)
(3) 多对多联系 (M ∶ N)

设计范式
（范式,数据库设计范式,数据库的设计范式）是符合某一种级别的关系模式的集合。

构造数据库必须遵循一定的规则。
在关系数据库中，这种规则 就是范式。

关系数据库中的关系必须满足一定的要求，即满足不同的范式。

数据库六种范式
(1NF,2NF,3NF,BCNF,4NF,5NF)

目前关系数据库有六种范式：
第一范式（1NF）、第二范式（2NF）、第三范式 （3NF）、
第四范式（4NF）、第五范式（5NF）和第六范式（6NF）。

满足最低要求的范式是第一范式（1NF）。

在第一范式的基础上进一步满足更多 要求的称为第二范式（2NF），
其余范式以次类推。

一般说来，数据库只需满足第三范式（3NF）就行了。


在创建一个数据库的过程中，
范化是将其转化为一些表的过程，

这种方法可以使从数据库得到的结果更加明确。
这样可能使数据库产生重复数据，从而导致创建多余的表。

范化是 在识别
数据库中的数据元素、关系，以及定义所需的表和各表中的项目
 这些初始工作之后
的一个细化的过程。


关系数据库的几种设计范式介绍

1 第一范式（1NF）

在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，
  不 满足第一范式（1NF）的数据库
就 不是 关系数据库。

所谓第一范式（1NF）是指
数据库表的每一列都是不可分割的基本数据项，
同一列中不能有多个值，
即实体中的某个属性不能有多个值或者不能有重复的属 性。

如果出现重复的属性，就可能需要定义一个新的实体，
新的实体由重复的属性构成，
新实体与原实体之间为一对多关系。

在第一范式（1NF）中
表的每一行只 包含一个实例的信息。
第一范式就是无重复的列。


2 第二范式（2NF）
满足第二范式（2NF）必须先满足第一范式（1NF）。
第二范式（2NF）要求数 据库表中的每个实例或 行必须可以被唯一 地 区分。

为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。
这个惟一属性列被称为主关键字或主键、主 码。

第二范式（2NF）要求实体的属性完全依赖于主关键字。
所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，
如果存在，那么这个属性和主关键字的 这一部分应该分离出来形成一个新的实体，
新实体与原实体之间是一对多的关系。

为实现区分通常需要为表加上一个列，
以存储各个实例的惟一标识。
简而言之，第 二范式就是非主属性非部分依赖于主关键字。

符合1NF，且所有的非主属性都完全依赖于主属性。

从这个定义可以看出，
第二范式不存在非主属性对于主属性的部分依赖，不过允许非主属性之间存在着传递依赖。

2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性，更通俗说有主键。

主属性所属的字段称为主键。注意主属性是一个称为主属性的属性元组。
当主键由多个字段组成时称之为复合主键。
定义了主键，每条记录就可以通过主属性来唯一标识、区分。
这个主键本身不要求有意义，所以经常使用连续增长的数来作为主属性。 

主属性元组中的主属性也可能是好几个，如果一个主属性，
它不能单独做为一个候选码，那么它也不能确定任何一个非主属性。


3 第三范式（3NF）

满足第三范式（3NF）必须先满足第二范式（2NF）。
简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信 息。

简而言之，第三范式就是属性不依赖于其它非主属性。

第三范式（3NF）：
在第二范式的基础上，
数据表中如果 不 存在 非关键字段 对 任一候选关键字段的传递函数 依赖 
则符合第三范式。

所谓传递函数依赖，指的是如果存在"A → B → C"的决定关系，
则C传递函数依赖于A

符合2NF，并要求任何非主属性不依赖于其他非主属性，
也就是在第二范式的基础上消除传递依赖（A->B->C）。
消除传递依赖。
3NF是对字段冗余性的约束，
即任何字段不能由其他字段派生出来，它要求字段没有冗余。

BC范式（BCNF）：

符合3NF，并且主属性内部不能有部分或传递依赖。
这将消除对主属性子集的依赖，使主属性保持最简。
BC范式既检查非主属性，又检查主属性。
当只检查非主属性时，就成了第三范式。
满足BC范式的关系都必然满足第三范式。

若一个关系达到了第三范式，并且它只有一个候选码，或者它的每个候选码都是单属性，
则该关系自然达到BC范式。





第四范式（4NF）：

满足BCNF，消除非平凡且非FD的多值依赖(MVD)。
4NF就是限制 关系模式的属性之间
不允许 有非平凡且非函数依赖的多值依赖。

对每一个出现的非平凡的多值依赖K→→A，K→→B，分表。
即消除多值依赖，只允许函数依赖。

也就是说，当一个表中的非主属性互相独立时（3NF），
这些非主属性不应该有多值。
若有多值就违反了第四范式。
显然一个关系模式是4NF，则必为BCNF。


第五范式（5NF）：

是最终范式。消除连接依赖，并且必须保证数据完整性。

第五范式有以下要求：
必须满足第四范式；
表必须可以分解为较小的表，除非那些表在逻辑上拥有与原始表相同的主键。




数据库的设计范式是数据库设计所需要满足的规范，
满足这些规范的数据库是简洁的、结构明晰的，
同时，不会发生插入（insert）、删除 （delete）和更新（update）操作异常。




多值依赖：

多值依赖是属性之间的一对多关系，记为K→→A。

函数依赖事实上是单值依赖，所以不能表达属性值之间的一对多关系。
（有人称函数依赖为多值依赖的特例）

平凡的多值依赖：
全集U=K+A，一个K可以对应于多个A，即K→→A。此时整个表就是一组一对多关系。

非平凡的多值依赖：
全集U=K+A+B，一个K可以对应于多个A，也可以对应于多个B，A与B互相独立，即K→→A，K→→B。
整个表有多组一对多关系，
且有：“一”部分是相同的属性集合，“多”部分是互相独立的属性集合。

数据库的一些基本概念：

实体：现实世界中客观存在并可以被区别的事物。在数据库中往往是一个数据表。

属性：教科书上解释为：“实体所具有的某一特性”，在关系数据库中，属性又是个物理概念，属性可以看作是“表的一列”。

元组：表中的一行就是一个元组。

分量：元组的某个属性值。在一个关系数据库中，它是一个操作原子，即关系数据库在做任何操作的时候，属性是“不可分的”。否则就不是关系数据库了。

候选码和主码：表中可以唯一确定一个元组的某个属性（或者属性组）叫候选码，我们从许多个候选码中挑一个就叫主码。

全码：如果一个码包含了所有的属性，这个码就是全码。

主属性：一个属性只要在任何一个候选码中出现过，这个属性就是主属性。

非主属性：与上面相反，没有在任何候选码中出现过，这个属性就是非主属性。

外码：一个属性（或属性组），它不是码，但是它别的表的码，它就是外码。

函数依赖：

设R(U)是一个属性集U上的一个关系模式，X和Y是U的子集。若对于R(U)的任意两个可能的具体关系r1、r2，若r1[x] == r2[x]则r1[y] == r2[y]，或者若r1[x] != r2[x]则r1[y] != r2[y]，称X决定Y，或者Y函数依赖于X，记作X→Y。就像函数一样，给一个确定的输入（属性集X），有一个确定的输出（属性集Y）。

抽象的“关系模式”和具体存在的“关系”，下文统称“关系”。

如果X→Y，但Y为X的子集, 则称X→Y是平凡函数依赖。
如：关系R(Sno, Cno)，依赖关系(Sno, Cno)→Sno，(Sno, Cno)→Cno都是平凡函数依赖。

如果X→Y，但Y不为X的子集，则称X→Y是非平凡的函数依赖。
如：关系R(Sno, Cno, Grade)，依赖关系(Sno, Cno)→Grade是非平凡函数依赖。

如果X→Y，存在X的真子集X1，使得X1→Y，则称Y部分依赖于X。也就是Y依赖于部分的X。
如：学生表(学号, 姓名, 性别, 班级, 年龄)，(学号, 姓名)→性别，学号→性别，所以(学号, 姓名)→性别是部分函数依赖。

如果X→Y，但任何X的真子集X1都不存在X1→Y则称Y完全依赖于X。
如：成绩表(学号, 课程号, 成绩)，(学号, 课程号)→成绩，学号!→成绩，课程号!→成绩，所以(学号, 课程号)→成绩是完全函数依赖。

如果X→Y，Y→Z，X⊄Y，Y!→X，(X∪Y)∩Z=∅，则称Z传递依赖于X。
如：关系S(学号, 系名, 系主任)，学号→系名，系名→系主任，系名!→学号，所以学号→系主任为传递函数依赖。

函数依赖与属性的关系：

设R(U)是属性集U上的关系模式，X、Y是U的子集。

如果X和Y之间是一对一（1:1）关系，如学校和校长，则存在函数依赖X→Y和Y→X。

如果X和Y之间是一对多（1:n）关系，如年龄和姓名，则存在函数依赖Y→X。

如果X和Y之间是多对多（m:n）关系，如学生和课程，则X和Y之间不存在函数依赖。



https://blog.csdn.net/zgcr654321/article/details/82350236






