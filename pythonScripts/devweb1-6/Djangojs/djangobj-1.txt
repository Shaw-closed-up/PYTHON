
http://www.bootcss.com/
https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=微信登录
https://wx.qq.com/
http://uc.tmooc.cn

https://github.com/hiys/PYTHON

https://fanyi.baidu.com/
https://www.baidu.com/
http://192.168.1.11:8800/polls/
http://192.168.1.11:8800/admin/polls/question/
http://192.168.1.11/


scp  -P7920   -r   djProject/   student@192.168.1.254:/home/student/devweb1-6/Djangojs/

[root@V1 djProject]# ls  /root/djProject/mysite/
manage.py  mysite  polls
#django项目基础目录默认设置是manage.py文件所在的目录/root/djProject/mysite/

reset

=============================

cd  djProject/

source    /root/djProject/djEnv/bin/activate #激活虚拟环境

pip   freeze   　　　#查看模块包

cd  mysite/

python  manage.py  runserver  0:8800 #开启django网站服务


#＃----------- cd  mysite/ 进入项目根目录　django项目基础目录


[root@V1 ~]# cd  djProject/
[root@V1 djProject]# 
[root@V1 djProject]# source    /root/djProject/djEnv/bin/activate #激活 虚拟环境
(djEnv) [root@V1 djProject]# 
(djEnv) [root@V1 djProject]# pip   freeze   　　　#查看模块包
Django==1.11.6
PyMySQL==0.9.3
pytz==2019.1
(djEnv) [root@V1 djProject]# 
(djEnv) [root@V1 djProject]# cd  mysite/
(djEnv) [root@V1 mysite]# 
(djEnv) [root@V1 mysite]# python  manage.py  runserver  0:8800 #开启django网站服务
Performing system checks...

System check identified no issues (0 silenced).
May 27, 2019 - 12:32:31
Django version 1.11.6, using settings 'mysite.settings'
Starting development server at http://0:8800/
Quit the server with CONTROL-C.



hierarchy      英 [ˈhaɪərɑːki]
n.
等级制度(尤指社会或组织);统治集团;层次体系

===============================

[root@V1 ~]#  cd  djProject/
[root@V1 djProject]# ls
djEnv  mysite
[root@V1 djProject]# ls   mysite/
manage.py  mysite  polls

#django项目基础目录默认设置是manage.py文件所在的目录/root/djProject/mysite/


[root@V1 djProject]# ls   mysite/mysite/
__init__.py  __pycache__  settings.py  urls.py  wsgi.py

[root@V1 djProject]# ls   mysite/polls/
admin.py  __init__.py  models.py    tests.py  views.py
apps.py   migrations   __pycache__  urls.py

[root@V1 mysite]# ls  polls/
admin.py  __init__.py  models.py    tests.py  views.py
apps.py   migrations   __pycache__  urls.py

[root@V1 mysite]# vim    polls/models.py 
[root@V1 mysite]# cat    polls/models.py
from django.db import models
#import django.utils.timezone as timezone

# Create your models here.
class  Question(models.Model):
  question_text = models.CharField(max_length=200)
  publish_date = models.DateTimeField('date  published')

  def  __str__(self):
    return  self.question_text

class  Choice(models.Model):
  choice_text = models.CharField(max_length=200)
  votes = models.IntegerField(default=0)
  question = models.ForeignKey(Question, on_delete=models.CASCADE)

[root@V1 mysite]# 

[root@V1 djProject]# vim   /etc/my.cnf
[root@V1 djProject]# head   -7   /etc/my.cnf
[client]
default-character-set=utf8
[mysqld]
character-set-server=utf8
default-time_zone = '+08:00'
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
[root@V1 djProject]# systemctl   restart    mariadb

[root@V1 mysite]# cat   -n   polls/migrations/0001_initial.py 
     1	# -*- coding: utf-8 -*-
     2	# Generated by Django 1.11.6 on 2019-05-26 10:38
     3	from __future__ import unicode_literals
     4	
     5	from django.db import migrations, models
     6	import django.db.models.deletion
     7	
     8	
     9	class Migration(migrations.Migration):
    10	
    11	    initial = True
    12	
    13	    dependencies = [
    14	    ]
    15	
    16	    operations = [
    17	        migrations.CreateModel(
    18	            name='Choice',
    19	            fields=[
    20	                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
    21	                ('choice_text', models.CharField(max_length=200)),
    22	                ('votes', models.IntegerField(default=0)),
    23	            ],
    24	        ),
    25	        migrations.CreateModel(
    26	            name='Question',
    27	            fields=[
    28	                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
    29	                ('question_text', models.CharField(max_length=200)),
    30	                ('publish_date', models.DateTimeField(verbose_name='date  published')),
    31	            ],
    32	        ),
    33	        migrations.AddField(
    34	            model_name='choice',
    35	            name='question',
    36	            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question'),
    37	        ),
    38	    ]
[root@V1 mysite]# 

[root@V1 djProject]# vim     mysite/mysite/settings.py 

 26 DEBUG = True
 27 
 28 ALLOWED_HOSTS = [ '192.168.1.11', '192.168.1.12', '192.168.1.254' ]
 29 
 33 INSTALLED_APPS = [
 34     'django.contrib.admin',
 35     'django.contrib.auth',
 36     'django.contrib.contenttypes',
 37     'django.contrib.sessions',
 38     'django.contrib.messages',
 39     'django.contrib.staticfiles',
 40     'polls',
 41 ]

 53 ROOT_URLCONF = 'mysite.urls'
 54 

 77 DATABASES = {
 78     'default': {
 79         'ENGINE': 'django.db.backends.mysql',
 80         'NAME': 'django',
 81         'USER': 'root',
 82         'PASSWORD': '123',
 83         'HOST': '127.0.0.1',
 84         'PORT': '3306',
 85     }
 86 }
 87 

111 LANGUAGE_CODE = 'zh-hans'
112 
113 TIME_ZONE = 'Asia/Shanghai'
114 
115 USE_I18N = True
116 
117 USE_L10N = True
118 
119 USE_TZ = True   #True 修改成False #　119 USE_TZ = False
119 USE_TZ = False

==============================

hierarchy      英 [ˈhaɪərɑːki]
n.
等级制度(尤指社会或组织);统治集团;层次体系

[root@V1 mysite]# cat    polls/models.py
from django.db import models
#import django.utils.timezone as timezone

# Create your models here.
class  Question(models.Model):
  question_text = models.CharField(max_length=200)
  publish_date = models.DateTimeField('date  published')

  def  __str__(self):
    return  self.question_text

class  Choice(models.Model):
  choice_text = models.CharField(max_length=200)
  votes = models.IntegerField(default=0)
  question = models.ForeignKey(Question, on_delete=models.CASCADE)

[root@V1 mysite]# 


[root@V1 mysite]# vim   polls/admin.py
[root@V1 mysite]# cat   polls/admin.py
from django.contrib import admin
from    .models   import  Question, Choice

class  QuestionAdmin(admin.ModelAdmin):
  list_display = ('publish_date', 'question_text')
  list_filter = ('publish_date',)    #增加过滤器
  date_hierarchy = 'publish_date'    ##添加时间轴
  search_fields = ('question_text',)  #增加搜索功能
  ordering = ('-publish_date', 'question_text')
  #设置默认时间第一降序排列(注意'-publish_date'负号),question_text字段第二的排序规则

class  ChoiceAdmin(admin.ModelAdmin):
  list_display = ('question', 'choice_text', 'votes')
  raw_id_fields = ('question',)
  #添加Choice时，弹出页面显示的Question详情(必须是外键)
  #注意数据库django的表polls_choice 的外键question_id字段
  #question = models.ForeignKey(Question, on_delete=models.CASCADE)


# Register your models here.
admin.site.register(Question, QuestionAdmin)
admin.site.register(Choice, ChoiceAdmin)

[root@V1 mysite]# 


http://192.168.1.11:8800/admin/polls/choice/add/

http://192.168.1.11:8800/admin/polls/question/?o=-1.-2
第一　　第二　排序规则


[root@V1 ~]# cd   djProject/
[root@V1 djProject]# ll    djEnv/bin/activate
-rw-r--r-- 1 root root 2199 5月  26 12:07 djEnv/bin/activate

[root@V1 djProject]# source   djEnv/bin/activate

(djEnv) [root@V1 djProject]# ls
djEnv  mysite

(djEnv) [root@V1 djProject]# cd   mysite/

(djEnv) [root@V1 mysite]# ls
manage.py  mysite  polls

[root@V1 mysite]# ls   polls/
admin.py  __init__.py  models.py    tests.py  views.py
apps.py   migrations   __pycache__  urls.py

[root@V1 mysite]# grep  -n  '^class '  polls/models.py 
5:class  Question(models.Model):
12:class  Choice(models.Model):

[root@V1 mysite]# cat   -n     polls/models.py
     1	from django.db import models
     2	#import django.utils.timezone as timezone
     3	
     4	# Create your models here.
     5	class  Question(models.Model):
     6	  question_text = models.CharField(max_length=200)
     7	  publish_date = models.DateTimeField('date  published')
     8	
     9	  def  __str__(self):
    10	    return  self.question_text
    11	
    12	class  Choice(models.Model):
    13	  choice_text = models.CharField(max_length=200)
    14	  votes = models.IntegerField(default=0)
    15	  question = models.ForeignKey(Question, on_delete=models.CASCADE)
    16	
[root@V1 mysite]# 

--------------------  进入python shell 模式 ---------------

(djEnv) [root@V1 mysite]# python   manage.py    shell

Python 3.6.7 (default, May 16 2019, 19:00:38) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> #导入模型
>>> from    polls.models   import  (Question, Choice)
#django　为每个class都建立了一个objects管理器，
#可以通过 objects　对数据库进行增删改查操作

>>> Question.
Question.DoesNotExist(
Question.MultipleObjectsReturned(
Question.add_to_class(
Question.check(
Question.choice_set
Question.clean(
Question.clean_fields(
Question.date_error_message(
Question.delete(
Question.from_db(
Question.full_clean(
Question.get_deferred_fields(
Question.get_next_by_publish_date(
Question.get_previous_by_publish_date(
Question.id
Question.mro(
Question.objects
Question.pk
Question.prepare_database_save(
Question.publish_date
Question.question_text
Question.refresh_from_db(
Question.save(
Question.save_base(
Question.serializable_value(
Question.unique_error_message(
Question.validate_unique(

>>> Question.objects.
Question.objects.aggregate(
Question.objects.all(
Question.objects.annotate(
Question.objects.auto_created
Question.objects.bulk_create(
Question.objects.check(
Question.objects.complex_filter(
Question.objects.contribute_to_class(
Question.objects.count(
Question.objects.create(
Question.objects.creation_counter
Question.objects.dates(
Question.objects.datetimes(
Question.objects.db
Question.objects.db_manager(
Question.objects.deconstruct(
Question.objects.defer(
Question.objects.difference(
Question.objects.distinct(
Question.objects.earliest(
Question.objects.exclude(
Question.objects.exists(
Question.objects.extra(
Question.objects.filter(
Question.objects.first(
Question.objects.from_queryset(
Question.objects.get(
Question.objects.get_or_create(
Question.objects.get_queryset(
Question.objects.in_bulk(
Question.objects.intersection(
Question.objects.iterator(
Question.objects.last(
Question.objects.latest(
Question.objects.model(
Question.objects.name
Question.objects.none(
Question.objects.only(
Question.objects.order_by(
Question.objects.prefetch_related(
Question.objects.raw(
Question.objects.reverse(
Question.objects.select_for_update(
Question.objects.select_related(
Question.objects.union(
Question.objects.update(
Question.objects.update_or_create(
Question.objects.use_in_migrations
Question.objects.using(
Question.objects.values(
Question.objects.values_list(

>>> 
>>> Question.objects.all()
<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 中秋节日几号>]>
>>> 

[root@V1 mysite]# cat   -n     polls/models.py
     1	from django.db import models
     2	#import django.utils.timezone as timezone
     3	
     4	# Create your models here.
     5	class  Question(models.Model):
     6	  question_text = models.CharField(max_length=200)
     7	  publish_date = models.DateTimeField('date  published')
     8	
     9	  def  __str__(self):
    10	    return  self.question_text
    11	
    12	class  Choice(models.Model):
    13	  choice_text = models.CharField(max_length=200)
    14	  votes = models.IntegerField(default=0)
    15	  question = models.ForeignKey(Question, on_delete=models.CASCADE)
    16	
[root@V1 mysite]# 

>>> from   django.utils   import   timezone
>>> 

[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
> select *  from  polls_question;"
+----+--------------------------------------------+---------------------+
| id | question_text       | publish_date        |
+----+--------------------------------------------+---------------------+
|  1 | 第一次创业，期待结果是什么？               | 2019-05-26 11:25:00 |
|  2 | 业余爱好是哪些？                           | 2019-05-24 16:00:00 |
|  3 | 开源思想是指哪些？                         | 2019-05-27 13:18:00 |
|  4 | 中秋节日几号                               | 2019-03-29 13:19:00 |
+----+--------------------------------------------+---------------------+
[root@V1 mysite]# 

--------------------------- #创建 实例方式 1 -----------------------------

>>> q1= Question(question_text ='广州今日气温情况?', publish_date = timezone.now())
>>> print(q1)
广州今日气温情况?
>>> type(q1)
<class 'polls.models.Question'>
>>> q1.save()   #保存后生效，产生Question类的实例
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
select *  from  polls_question;"
+----+--------------------------------------------+---------------------+
| id | question_text                              | publish_date        |
+----+--------------------------------------------+---------------------+
|  1 | 第一次创业，期待结果是什么？               | 2019-05-26 11:25:00 |
|  2 | 业余爱好是哪些？                           | 2019-05-24 16:00:00 |
|  3 | 开源思想是指哪些？                         | 2019-05-27 13:18:00 |
|  4 | 中秋节日几号                               | 2019-03-29 13:19:00 |
|  5 | 广州今日气温情况?                          | 2019-05-27 15:17:53 |
+----+--------------------------------------------+---------------------+
[root@V1 mysite]# 

>>> q2= Question.objects.create(question_text ='什么时候收货利润?', publish_date = timezone.now())     #创建 实例方式二
>>> print(q2)
什么时候收货利润?
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
select *  from  polls_question;"
+----+--------------------------------------------+---------------------+
| id | question_text      | publish_date        |
+----+--------------------------------------------+---------------------+
|  1 | 第一次创业，期待结果是什么？               | 2019-05-26 11:25:00 |
|  2 | 业余爱好是哪些？                           | 2019-05-24 16:00:00 |
|  3 | 开源思想是指哪些？                         | 2019-05-27 13:18:00 |
|  4 | 中秋节日几号                               | 2019-03-29 13:19:00 |
|  5 | 广州今日气温情况?                          | 2019-05-27 15:17:53 |
|  6 | 什么时候收货利润?                          | 2019-05-27 15:22:50 |
+----+--------------------------------------------+---------------------+
[root@V1 mysite]# 

>>> c1 = Choice(choice_text='19',question= q1)
>>> c1
<Choice: Choice object>
>>> print(c1)
Choice object
>>> type(c1)
<class 'polls.models.Choice'>
>>> c1.save()
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
select *  from  polls_choice;"
+----+----------------------------+-------+-------------+
| id | choice_text                | votes | question_id |
+----+----------------------------+-------+-------------+
|  1 | 15000以上                  |     0 |           1 |
|  2 | 听音乐                     |     0 |           2 |
|  3 | 培养出20个专业人才         |     0 |           1 |
|  4 | 看玄幻小说                 |     0 |           2 |
|  5 | 旅游看海                   |     0 |           2 |
|  6 | 两年内投资回本             |     0 |           1 |
|  7 | 吃月饼                     |     0 |           4 |
|  8 | 19                         |     0 |           5 |
+----+----------------------------+-------+-------------+

[root@V1 mysite]# ls   polls/
admin.py  __init__.py  models.py    tests.py  views.py
apps.py   migrations   __pycache__  urls.py

[root@V1 mysite]# vim       polls/models.py

[root@V1 mysite]# cat   -n   polls/models.py
     1	from django.db import models
     2	#import django.utils.timezone as timezone
     3	
     4	# Create your models here.
     5	class  Question(models.Model):
     6	  question_text = models.CharField(max_length=200)
     7	  publish_date = models.DateTimeField('date  published')
     8	
     9	  def  __str__(self):
    10	    return  self.question_text
    11	
    12	class  Choice(models.Model):
    13	  choice_text = models.CharField(max_length=200)
    14	  votes = models.IntegerField(default=0)
    15	  question = models.ForeignKey(Question, on_delete=models.CASCADE)
    16	
    17	  def  __str__(self):
    18	    return  self.choice_text
    19	
    20	
[root@V1 mysite]# 

>>> quit()
(djEnv) [root@V1 mysite]# python   manage.py    shell
Python 3.6.7 (default, May 16 2019, 19:00:38) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> 
>>> 
>>> from    polls.models   import  (Question, Choice)
>>> from   django.utils   import   timezone
>>> q1 = Question.objects.get( id = 5 )
>>> print(q1)
广州今日气温情况?
>>> q1.id
5
>>> q1.question_text
'广州今日气温情况?'
>>> q1.publish_date
datetime.datetime(2019, 5, 27, 15, 17, 53)

>>> q1.choice_set.a
q1.choice_set.add(          q1.choice_set.annotate(
q1.choice_set.aggregate(    q1.choice_set.auto_created
q1.choice_set.all(

------------ 注意　Question　和 Choice 这２个类有外键question_id 关系
  #注意数据库django的表polls_choice 的外键question_id字段
  #question = models.ForeignKey(Question, on_delete=models.CASCADE)

>>> q1.choice_set.all()  #查看id=5的问题 实例q1 的所有答案选项
<QuerySet [<Choice: 19>]>
>>> 
>>> type(q1)
<class 'polls.models.Question'>

>>> c1 = Choice.objects.get(id= 8)
>>> type(c1)
<class 'polls.models.Choice'>
>>> 
>>> c1.
c1.DoesNotExist(             c1.objects
c1.MultipleObjectsReturned(  c1.pk
c1.check(                    c1.prepare_database_save(
c1.choice_text               c1.question
c1.clean(                    c1.question_id
c1.clean_fields(             c1.refresh_from_db(
c1.date_error_message(       c1.save(
c1.delete(                   c1.save_base(
c1.from_db(                  c1.serializable_value(
c1.full_clean(               c1.unique_error_message(
c1.get_deferred_fields(      c1.validate_unique(
c1.id                        c1.votes

>>> c1.question
<Question: 广州今日气温情况?>
>>> c1.choice_text
'19'
>>> 
>>> q1 = Question.objects.get( id = 5 )
>>> print(q1)
广州今日气温情况?
>>> q1.id
5
>>> q1.question_text
'广州今日气温情况?'
>>> q1.publish_date
datetime.datetime(2019, 5, 27, 15, 17, 53)

----------------------通过修改实例属性　来修改数据库中的表中的字段值　－－－－－－

>>> q1.question_text = '上海明天气温预测?'
>>> q1.save
<bound method Model.save of <Question: 上海明天气温预测?>>
>>> q1.save()
>>> q1.publish_date
datetime.datetime(2019, 5, 27, 15, 17, 53)
>>> q1.question_text
'上海明天气温预测?'
>>> q1.id
5
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
> select *  from  polls_question;"
+----+--------------------------------------------+---------------------+
| id | question_text                              | publish_date        |
+----+--------------------------------------------+---------------------+
|  1 | 第一次创业，期待结果是什么？               | 2019-05-26 11:25:00 |
|  2 | 业余爱好是哪些？                           | 2019-05-24 16:00:00 |
|  3 | 开源思想是指哪些？                         | 2019-05-27 13:18:00 |
|  4 | 中秋节日几号                               | 2019-03-29 13:19:00 |
|  5 | 上海明天气温预测?                          | 2019-05-27 15:17:53 |
|  6 | 什么时候收货利润?                          | 2019-05-27 15:22:50 |
+----+--------------------------------------------+---------------------+
[root@V1 mysite]# 

>>> Question.objects.all()
<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 中秋节日几号>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>

>>> Choice.objects.all()
<QuerySet [<Choice: 15000以上>, <Choice: 听音乐>, <Choice: 培养出20个专业人才>, <Choice: 看玄幻小说>, <Choice: 旅游看海>, <Choice: 两年内投资回本>, <Choice: 吃月饼>, <Choice: 19>]>
>>> 
>>> Question.objects.get(id=1)
<Question: 第一次创业，期待结果是什么？>

>>> Question.objects.get(question_text='第一次创业，期待结果是什么 ？')
<Question: 第一次创业，期待结果是什么？>

>>> Question.objects.get(id=5)
<Question: 上海明天气温预测?>

>>> Question.objects.get(question_text= '上海明天气温预测?')
<Question: 上海明天气温预测?>

>>> -------------------　get　方法只能返回一个满足过滤条件的实例对象

>>> Question.objects.get(publish_date__year = 2019)

Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/root/djProject/djEnv/lib/python3.6/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/root/djProject/djEnv/lib/python3.6/site-packages/django/db/models/query.py", line 384, in get
    (self.model._meta.object_name, num)
polls.models.MultipleObjectsReturned: get() returned more than one Question -- it returned 6!

>>> --------　filter　方法　能返回　多个满足过滤条件的实例对象集合

>>> type(Question.objects.filter(publish_date__year = 2019))
<class 'django.db.models.query.QuerySet'>
>>> 

>>> Question.objects.filter(publish_date__year = 2019)
<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 中秋节日几号>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>

>>> Question.objects.filter(publish_date__month = 3)
<QuerySet [<Question: 中秋节日几号>]>

>>> Question.objects.filter(publish_date__month = 5)
<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>

>>> ------------------------- 按照时间升序排序
>>> Question.objects.order_by('publish_date')
<QuerySet [<Question: 中秋节日几号>, <Question: 业余爱好是哪些？>, <Question: 第一次创业，期待结果是什么？>, <Question: 开源思想是指哪些？>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
select *  from  polls_question;"
+----+--------------------------------------------+---------------------+
| id | question_text          | publish_date        |
+----+--------------------------------------------+---------------------+
|  1 | 第一次创业，期待结果是什么？               | 2019-05-26 11:25:00 |
|  2 | 业余爱好是哪些？                           | 2019-05-24 16:00:00 |
|  3 | 开源思想是指哪些？                         | 2019-05-27 13:18:00 |
|  4 | 中秋节日几号                               | 2019-03-29 13:19:00 |
|  5 | 上海明天气温预测?                          | 2019-05-27 15:17:53 |
|  6 | 什么时候收货利润?                          | 2019-05-27 15:22:50 |
+----+--------------------------------------------+---------------------+

　-------------　'-publish_date' 按照时间　降序排序，注意符号的作用

>>> Question.objects.order_by('-publish_date')
<QuerySet [<Question: 什么时候收货利润?>, <Question: 上海明天气温预测?>, <Question: 开源思想是指哪些？>, <Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 中秋节日几号>]>
>>> 
>>> q1 = Question.objects.get(question_text= '上海明天气温预测?')
>>> print(q1)
上海明天气温预测?
>>> type(q1)
<class 'polls.models.Question'>
>>>
>>> q1.choice_set.create(choice_text = "25")
<Choice: 25>
>>> q1.choice_set.all()
<QuerySet [<Choice: 19>, <Choice: 25>]>
>>> 
[root@V1 mysite]# mysql  -uroot  -p123  -D django -e "
select *  from  polls_choice;"
+----+----------------------------+-------+-------------+
| id | choice_text                | votes | question_id |
+----+----------------------------+-------+-------------+
|  1 | 15000以上                  |     0 |           1 |
|  2 | 听音乐                     |     0 |           2 |
|  3 | 培养出20个专业人才         |     0 |           1 |
|  4 | 看玄幻小说                 |     0 |           2 |
|  5 | 旅游看海                   |     0 |           2 |
|  6 | 两年内投资回本             |     0 |           1 |
|  7 | 吃月饼                     |     0 |           4 |
|  8 | 19                         |     0 |           5 |
|  9 | 25                         |     0 |           5 |
+----+----------------------------+-------+-------------+

recently     英 [ˈriːsntli]
      adv.不久前;最近
publish      英 [ˈpʌblɪʃ]
      v.出版;发行;(在报刊)发表，刊登，登载;(在互联网上)发表，公布

[root@V1 mysite]# find  /  -type d  -iname  "*site-packages*"

/root/djProject/djEnv/lib/python3.6/site-packages
..............................
/usr/lib/python2.7/site-packages
/usr/lib64/python2.7/site-packages
/usr/local/lib/python3.6/site-packages

[root@V1 mysite]# grep  -n  '^class '   /usr/local/lib/python3.6/datetime.py
337:class timedelta:
659:class date:
954:class tzinfo:
1024:class time:
1361:class datetime(date):
1961:class timezone(tzinfo):

[root@V1 mysite]# vim   polls/models.py 

[root@V1 mysite]# cat   -n   polls/models.py

     1	from  django.db import models
     2	from  django.utils import  timezone
     3	from    datetime   import  timedelta
     4	
     5	# Create your models here.
     6	class  Question(models.Model):
     7	  question_text = models.CharField(max_length=200)
     8	  publish_date = models.DateTimeField('date  published')
     9	
    10	  def  __str__(self):
    11	    return  self.question_text
    12	  def  was_publish_recently(self):
    13	    return  self.publish_date > timezone.now() - timedelta(days=7)
    14	    #最近七天发布的信息
    15	
    16	
    17	class  Choice(models.Model):
    18	  choice_text = models.CharField(max_length=200)
    19	  votes = models.IntegerField(default=0)
    20	  question = models.ForeignKey(Question, on_delete=models.CASCADE)
    21	
    22	  def  __str__(self):
    23	    return  self.choice_text
    24	
    25	
[root@V1 mysite]# 

(djEnv) [root@V1 mysite]# python   manage.py    shell

Python 3.6.7 (default, May 16 2019, 19:00:38) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> 
>>> from    polls.models   import  (Question, Choice)
>>> from   django.utils   import   timezone
>>> from    datetime   import  timedelta
>>> from    django.shortcuts  import render

>>> print(timezone.now())
2019-05-27 17:31:22.611991
>>> print(timedelta(days=7))
7 days, 0:00:00
>>> print(timedelta(days = 3))
3 days, 0:00:00
>>> print(timezone.now() - timedelta(days = 3))
2019-05-24 17:36:13.129320
>>>
>>> q1 = Question.objects.get(question_text= '上海明天气温预测?')
>>> type(q1)
<class 'polls.models.Question'>
>>> q1.publish_date
datetime.datetime(2019, 5, 27, 15, 17, 53)

>>> questions = Question.objects.all()
>>> questions
<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 中秋节日几号>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>


[root@V1 mysite]# ls
manage.py  mysite  polls
[root@V1 mysite]# ls    polls/
admin.py  __init__.py  models.py    tests.py  views.py
apps.py   migrations   __pycache__  urls.py

[root@V1 mysite]# vim   polls/views.py 

[root@V1 mysite]# cat  -n  polls/views.py
     1	from django.shortcuts import render, HttpResponse
     2	from   .models   import   Question
     3	
     4	# Create your views here.
     5	#request形参必须提供，表示用户的请求http://192.168.1.11:8800/polls/
     6	#def   index(request):
     7	#  return  HttpResponse('<h1>Polls OK</h1>')
     8	
     9	#为polls主页编写视图函数
    10	def   index(request):
    11	  questions = Question.objects.all()
    12	  return  render(request, 'polls/index.html', {'questions': questions})
    13	  #向用户返回一个网页(模板),{'questions': questions}字典是传给网页的数据
    14	
[root@V1 mysite]# 
/*** # mkdir   -p  polls/templates/polls  #默认模板目录templates ***/


[root@V1 mysite]# vim  polls/urls.py 

[root@V1 mysite]# cat  -n   polls/urls.py
     1	"""
     2	[root@V1 djProject]# ls  /root/djProject/mysite/polls/
     3	admin.py  __init__.py  models.py    tests.py  views.py
     4	apps.py   migrations   __pycache__  urls.py
     5	[root@V1 djProject]# ls  /root/djProject/mysite/
     6	manage.py  mysite  polls
     7	#django项目基础目录默认设置是manage.py文件所在的目录/root/djProject/mysite/
     8	"""
     9	from django.conf.urls import url
    10	from  .  import   views   #相对路径导入模块
    11	urlpatterns = [
    12	  #使用index函数响应http://192.168.1.11/polls/主页请求，
    13	  #该url的名字(name)是index
    14	  url(r'^$', views.index, name='index')  #http://192.168.1.11/polls/
    15	]
[root@V1 mysite]# 


[root@V1 mysite]# cat   -n   polls/models.py
     1	from  django.db import models
     2	from  django.utils import  timezone
     3	from    datetime   import  timedelta
     4	
     5	# Create your models here.
     6	class  Question(models.Model):
     7	  question_text = models.CharField(max_length=200)
     8	  publish_date = models.DateTimeField('date  published')
     9	
    10	  def  __str__(self):
    11	    return  self.question_text
    12	  def  was_publish_recently(self):
    13	    return  self.publish_date > timezone.now() - timedelta(days=7)
    14	    #最近七天发布的信息
    15	
    16	class  Choice(models.Model):
    17	  choice_text = models.CharField(max_length=200)
    18	  votes = models.IntegerField(default=0)
    19	  question = models.ForeignKey(Question, on_delete=models.CASCADE)
    20	
    21	  def  __str__(self):
    22	    return  self.choice_text
    23	
    24	
[root@V1 mysite]# 
[root@V1 mysite]# ls   mysite/
__init__.py  __pycache__  settings.py  urls.py  wsgi.py

[root@V1 mysite]# vim    mysite/settings.py 
 53 ROOT_URLCONF = 'mysite.urls'
 54 
 55 TEMPLATES = [
 56     {
 57         'BACKEND': 'django.template.backends.django.DjangoTemplates'    ,
 58         'DIRS': [],  　　 #注意这里 [ '自定义模板目录']
 59         'APP_DIRS': True,
 60         'OPTIONS': {
 61             'context_processors': [
 62                 'django.template.context_processors.debug',
 63                 'django.template.context_processors.request',
 64                 'django.contrib.auth.context_processors.auth',
 65                 'django.contrib.messages.context_processors.messages    ',
 66             ],
 67         },

[root@V1 mysite]# vim    mysite/urls.py 
[root@V1 mysite]# tail     -8    mysite/urls.py
"""
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^polls/', include('polls.urls')) 
]
[root@V1 mysite]# 
[root@V1 mysite]# vim   polls/urls.py 
[root@V1 mysite]# tail   -7   polls/urls.py
from django.conf.urls import url
from  .  import   views   #相对路径导入模块
urlpatterns = [
  #使用index函数响应http://192.168.1.11/polls/主页请求，
  #该url的名字(name)是index
  url(r'^$', views.index, name='index')  #http://192.168.1.11/polls/
]
[root@V1 mysite]# 



[root@V1 mysite]#  ls
manage.py  mysite  polls
[root@V1 mysite]# mkdir   -p  polls/templates/polls  #默认模板目录templates

[root@V1 mysite]# ls   polls/
admin.py  __init__.py  models.py    templates  urls.py
apps.py   migrations   __pycache__  tests.py   views.py


[root@V1 mysite]# vim   polls/templates/polls/index.html
[root@V1 mysite]# cat   -n   polls/templates/polls/index.html

     1	<!DOCTYPE html>
     2	<!--STATUS OK-->
     3	<html lang="zh-CN">
     4	 <head>
     5	  <meta charset="UTF-8">
     6	  <meta name="description" content="">
     7	<!-- <link rel="icon" href="./favicon.ico">- -->
     8	  <title>polls主页标题</title>
     9	 </head>
    10	 <body>
    11	  <div>
    12	{# questons 是django函数传过来的变量名 #}
    13	   <p> {{ questions }} <p>
    14	   <hr/>
    15	   <p> -------- --------</p>
    16	  </div>
    17	 </body>
    18	</html>
    19	
[root@V1 mysite]# 
http://192.168.1.11:8800/polls/

<QuerySet [<Question: 第一次创业，期待结果是什么？>, <Question: 业余爱好是哪些？>, <Question: 开源思想是指哪些？>, <Question: 中秋节日几号>, <Question: 上海明天气温预测?>, <Question: 什么时候收货利润?>]>

-------- --------

https://passport.ctrip.com/user/reg/setpwd?
注册手机号
86-135****3630
密码fe＊＊＊＊_yj＊＊＊
https://passport.ctrip.com/user/reg/success?mobile=ODYtMTM1KioqKjM2MzA=

5月31日（星期五）出发K528 修改车次
07:45
广州
22小时24分 06:09+1
无锡
scp  -P7920   -r   djProject/   student@192.168.1.254:/home/student/devweb1-6/Djangojs/

https://www.google.com/search?q=www&oq=www&aqs=chrome..69i57.8122j0j4&sourceid=chrome&ie=UTF-8


















